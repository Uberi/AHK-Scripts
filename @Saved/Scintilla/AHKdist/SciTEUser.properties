# User initialisation file for SciTE
# Place in same directory as SciTE.exe
# Or define the SciTE_Home environment variable
# with the path of the directory where this file is
# (necessary to be able to put abbrev.properties with the other props).
# Documentation at http://www.scintilla.org/SciTEDoc.html

## Status Bar
# You can choose a number smaller than the number of available status bar displays
statusbar.number=3
statusbar.text.1=\
$(ReadOnly) $(FileAttr) li=$(LineNumber) co=$(ColumnNumber) $(OverType) ($(EOLMode)) || \
$(BufferLength) chars / $(NbOfLines) lines. Sel: $(SelLength) chars / $(SelHeight) lines || Style: $(CurrentStyle) || \
$(LuaInfoMessage)
statusbar.text.2=\
$(FileNameExt) : $(FileDate) | $(FileTime) || $(FileAttr)
statusbar.text.3=\
Now is: Date=$(CurrentDate) Time=$(CurrentTime) || $(tab.size.*.java)

### Globals

## Example of open filters
source.files=*.ahk;*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hxx;*.hpp;\
*.idl;*.odl;*.rc;*.rc2;*.dlg;*.def;\
*.java;*.sql;*.js;*.lua;*.html;*.css;*.xml;*.iface;*.bat;*.cmd

all.files=All Files (*.*)|*.*|

open.filter=\
$(all.files)\
All Source|$(source.files)|\
$(filter.ahk)\
$(filter.text)\
$(filter.conf)\
$(filter.cpp)\
$(filter.css)\
$(filter.web)\
$(filter.js)\
$(filter.lua)\
$(filter.sql)\
$(filter.idl)\
$(filter.properties)

## Give symbolic names to the set of fonts used in the standard styles.

# I use mainly monospaced fonts, for easy tab alignment (eg. in #defines)
# and to keep comment boxes rectangular.
# As it is not so important in text, properties/ini and HTML (pure and embedded code),
# I use here nicer proportional fonts.
# I have here variants, the latest one win! Sometime I switch them around...

# Used when switching to monospace display (Ctrl+F11)
font.monospace=font:Lucida Sans Typewriter,size:8
font.monospace=font:Andale Mono,size:8

# Monospace font for code
# Used for most code (no o0OIl1i confusion).
font.monospace.code=font:Andale Mono,size:8

# Monospace font for comments (boxed, with tables, alignments, etc.)
font.monospace.comment=font:Inconsolata,size:10
font.monospace.comment=font:Courier New,size:8

# Used to display rather informal/small code (scripts)
font.proportional.serif=font:Georgia,size:8
font.proportional.sans=font:Verdana,size:8

# A bit of fantasy...
font.fantasy=font:Comic Sans MS,size:8

# Readable, used for texts (docs, HTML text...)
font.text=font:Book Antiqua,size:9
font.text=font:Bitstream Vera Serif,size:9
font.text=font:Georgia,size:9

# For SciTE console
font.small=font:Arial,size:7

# Special uses (line numbers, UUID, etc.)
font.computer=font:Arial Narrow,size:7
font.computer=font:OCR A Extended,size:7

# I put this one in styles not used by the lexer (to be sure they are not used...)
font.notused=font:Webdings,size:7


#-- Font use independent of platform

# Script/small, informal code
font.base=$(font.proportional.sans)
# Regular code : monospace
font.code.base=$(font.monospace.code)
# Comments, proportional in line comments (rarely aligned),
# fixed in stream comments (often boxed)
font.code.comment.box=$(font.monospace.comment)
font.code.comment.line=$(font.proportional.serif)
font.code.comment.doc=$(font.monospace.comment)

font.text.base=$(font.text)
font.text.comment=$(font.fantasy)

font.embedded.base=$(font.base)
font.embedded.comment=$(font.proportional.serif)

## Give symbolic names to the set of colours used in the standard styles.
colour.code.comment.box=fore:#7070A0
colour.code.comment.line=fore:#8080A0
colour.code.comment.doc=fore:#0000A0
colour.text.comment=fore:#0000FF,back:#D0F0D0
colour.other.comment=fore:#007F7F
colour.embedded.comment=back:#E0EEFF
colour.notused=back:#FF0000

colour.number=fore:#D000FF
colour.keyword=fore:#0055AA
colour.string=fore:#8000FF
colour.char=fore:#008040
colour.operator=fore:#C07040
colour.preproc=fore:#A00070
colour.error=fore:#FFFF00,back:#FF0000

style.stringeol=fore:#888800,back:#FFD0D0,eolfilled,$(font.computer),bold

## Global default styles for all languages
# Default. Set here the back property to change the default background color of Scintilla.
style.*.32=$(font.text),fore:#000000
# For printing plain text in monospaced font
#~ style.*.32=$(font.monospace),fore:#000000
# Line number
style.*.33=$(font.computer),back:#A8D0C8,fore:#604020
# Brace highlight
style.*.34=fore:#0000FF,back:#AAEEFF
# Brace incomplete highlight
style.*.35=fore:#FF0000,back:#E0C0D0
# Control characters
style.*.36=font:Arial Narrow,size:10
# Indentation guides
style.*.37=fore:#C0C0C0,back:#FFFFFF

## Printing
print.colour.mode=2
print.magnification=0
# Setup: left, right, top, bottom margins, in local units:
# hundredths of millimeters or thousandths of inches
print.margins=1500,1000,1000,1500
# Header/footer:
print.header.format=$(FileNameExt) || Printed on $(CurrentDate), $(CurrentTime) || Page $(CurrentPage)
print.footer.format=$(FilePath) || File date: $(FileDate) || File time: $(FileTime)
# Header/footer style
print.header.style=font:Arial,size:12,bold
print.footer.style=font:Arial Narrow,size:10,italics

## Warnings - only works on Windows and needs to be pointed at files on machine
if PLAT_WIN
	warning.findwrapped=100,880,200
	warning.notfound=0,440,200
	warning.wrongfile=0,220,200
	warning.executeok=0,660,100
	warning.executeko=100,1200,500
	warning.nootherbookmark=100,550,100
if WITH_SPEAKERS
	warning.findwrapped=100,C:\Windows\Media\SFX\Boing.wav
	warning.notfound=0,C:\Windows\Media\SFX\Effect.wav
	warning.wrongfile=0,C:\Windows\Media\SFX\Glass.wav
#	warning.executeok=0,C:\Windows\Media\SFX\Fanfare.wav
	warning.executeok=0,C:\Windows\Media\SFX\Wowpulse.wav
	warning.executeko=100,C:\Windows\Media\SFX\GlassBreak.wav
	warning.nootherbookmark=100,C:\Windows\Media\SFX\Boing2.wav
if TEST
	# Flash window and play sound
	warning.findwrapped=100,E:\Windows\Media\SFX\Boing.wav
	# Just play sound
	warning.wrongfile=0,E:\Windows\Media\SFX\Glass.wav
	# Flash window and beep
	warning.executeok=50,220,200
	# Just beep
	warning.executeko=0,440,200
	# Just flash window
	warning.nootherbookmark=200

# User defined key commands
user.shortcuts=\
Esc|IDM_QUIT|\
Ctrl+PageUp|IDM_PREVFILE|\
Ctrl+PageDown|IDM_NEXTFILE|\
Ctrl+Alt+X|IDM_PASTEANDDOWN|\
Ctrl+Shift+C|IDM_EOL_CONVERT|\
Ctrl+Shift+Down|IDM_WRAP|\
Ctrl+Shift+Insert|IDM_LINENUMBERMARGIN|\
F4|IDM_OPENFILESHERE|

# User defined context
user.context.menu=\
||\
Clear Output|IDM_CLEAROUTPUT|

# Define the Lexer menu,
# Each item contains three parts: menu string | file extension | key
# The only keys allowed currently are based on F-keys and alphabetic keys and look like
# [Ctrl+][Shift+][Fn|a] such as F12 or Ctrl+Shift+D.
# A '&' may be placed before a letter to be used as an accelerator. This does not work on GTK+.
menu.language=\
none|txt|Shift+F11|\
Apache Confi&g|conf||\
AutoHotkey|ahk||\
&Batch|bat||\
&C / C++|c||\
CSS|css||\
&Difference|diff||\
&Errorlist|err||\
H&ypertext|html|F12|\
&Java|java||\
Java&Script|js||\
Lu&a|lua||\
&Makefile|mak|Ctrl+Shift+F11|\
P&HP|php||\
&Properties|properties||\
Reso&urce|rc||\
S&QL|sql||\
VBScr&ipt|vbs||\
&XML|xml|Shift+F12|

## Import all the language specific properties files
# I add here the AHK lexer, the others are defined in the SciTEGlobal.properties
import ahk1

## Bookmark pixmaps
#~ import bookmarks

### Tools

# Reminder:
# command.subsystem.n.*= 0 (cmd line), 1 (GUI), 2 (ShellExecute), 3 (Lua/director), 4 (HtmlHelp), 5 (WinHelp)
# command.save.before.n.*= 1 (save), 2 (don't save), other (ask)

command.name.2.*=Download
command.subsystem.2.*=0
command.2.*=curl -O $(CurrentSelection)
command.is.filter.2.*=0
command.save.before.2.*=2

# Filter the current selection using an external command line program accepting stdin,
# then replace this selection with stdout.
command.name.4.*=Sort lines
command.4.*=sort
command.is.filter.4.*=1
command.subsystem.4.*=0
command.input.4.*=$(CurrentSelection)
command.replace.selection.4.*=1
command.quiet.4.*=1

command.name.5.*=Dict Lookup
command.subsystem.5.*=2
command.5.*=E:\Dev\AutoHotkey\Dict.ahk $(CurrentSelection)
command.save.before.5.*=2
command.quiet.5.*=1

# Filter the current selection using the external Lua interpreter,
# either giving the code in the command line,
# or in a Lua script file.

# SciTELua.properties

# The startup script is run to initialise SciTE.  This property
# is checked, and the script run only run once - at startup time.
# Afterward, whenever you switch buffers, Lua is restored to the
# state established by this script.  Unless the ext.lua.reset
# property is set, you need to restart SciTE in order to see
# changes in this property or in the underlying script file.
ext.lua.startup.script=$(SciteDefaultHome)/SciTEStartup.lua

# Normally, when the global state needs to be restored, this
# is done without re-evaluating the startup script.  However,
# if you are in the process of editing the startup script,
# you may want to re-execute it without having to restart
# SciTE.  For this, you can uncomment the following line.
ext.lua.reset=1

# The extension script is used to set up the Lua environment
# for a specific buffer in SciTE.  This property is optional,
# and can be used to define different behavior for each file
# type.  Furthermore, if a simple filename is used rather
# than an absolute path, then SciTE will look for the file
# in the local folder for the buffer (like SciTE.properties)
# before falling back to $(SciTEDefaultHome).
extension.*=SciTEExtension.lua

# SciTE Lua routine calls

command.mode.lua=subsystem:lua,quiet:yes,savebefore:no

command.mode.25.*=$(command.mode.lua)

# Add braces around the selected lines
command.name.5.*=Add braces
command.5.*=AddBraces
command.shortcut.5.*=Ctrl+=
command.subsystem.5.*=3
command.save.before.5.*=2

command.name.12.*=Add percents
command.12.*=AddPercents
command.shortcut.12.*=Ctrl+)
command.subsystem.12.*=3
command.save.before.12.*=2

command.name.12.*=Convert .ses file
command.12.*=ConvertSesFile
command.shortcut.12.*=Ctrl+)
command.subsystem.12.*=3
command.save.before.12.*=2

#~ command.name.6.*=&Add XML Tag
#~ command.6.*=AddXMLTag
#~ command.shortcut.6.*=Ctrl+Shift+X
#~ command.subsystem.6.*=3
#~ command.save.before.6.*=2

#~ command.name.6.*=&Fix Java code
#~ command.6.*=FixKeywords
#~ command.shortcut.6.*=Ctrl+Shift+X
#~ command.subsystem.6.*=3
#~ command.save.before.6.*=2

command.name.6.*=-

# Helper function changes depending on active lexer
command.name.7.*=&Helper function
command.7.*=HelperFunction
command.shortcut.7.*=Ctrl+!
command.subsystem.7.*=3
command.save.before.7.*=2

# Variable function, depends on the task to do
command.name.8.*=&Quick'n'Dirty
command.8.*=QuickNDirty
command.shortcut.8.*=Ctrl+Alt+Q
command.subsystem.8.*=3
command.save.before.8.*=2

; 9

# Offers a list of function and allow to run them
command.name.10.*=&Lua Tools
command.10.*=LuaTools
command.shortcut.10.*=Ctrl+Alt+L
command.subsystem.10.*=3
command.save.before.10.*=2

# Run a Lua function with parameters
# Shift+F8: Parameters
# 1) Lua function defined in SciTEStartup.lua
# 2) Parameters
command.name.11.*=&Run Lua function
command.11.*=$(1) $(2)
command.shortcut.11.*=Ctrl+Shift+Z
command.subsystem.11.*=3
command.save.before.11.*=2

command.name.15.*=Open current buffer in new window
command.15.*=$(SciteDefaultHome)\scite.exe -goto:$(LineNumber) -property:check.if.already.open=0 "$(FilePath)"
command.mode.15.*=subsystem:shellexec
