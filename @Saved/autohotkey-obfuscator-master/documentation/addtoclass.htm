<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Add Sections of Your Autohotkey Script to a 'Secure' Obfuscation Class</title>
<meta name="Description" content="This Autohotkey obfuscator allows you to add sections of your code to a 'secure' class which you can then break using obfuscator command comments.">

<link rel="stylesheet" href="mycss/standtemp.css" type="text/css">

<style type="text/css">
</style>

</head>
<body>

<table>
<tr>
<td class="logotd"><a href="index.htm"><img src="graphics/dynamicobfuscator.gif" border="0" width="547" height="130" alt="Dynamic Obfuscator for Autohotkey Scripts"></a></td>
<td class="headerspacer">&nbsp;</td>
<td class="authorinfo">
Obfuscator for Autohotkey Scripts - Written in Autohotkey
<br>Released under Open Source GPL License
<br>Author: <a href="http://davidmalia.com">David Malia</a>, Augusta ME, USA
<br><a href="http://dynamicobfuscator.org">http://dynamicobfuscator.org</a>
</td>
</tr>
</table>

<div id="wrapcols">

<div id="mainconts">

<div class="toplinks">
<a href="index.htm">General Program Features</a>
&nbsp; &nbsp;<a href="documentation.htm" class="selnav">User Manual</a>
&nbsp; &nbsp;<a href="downloadobfuscator.htm">Download</a>
</div>

<h1>Add Sections of Your Autohotkey Script to a 'Secure' Obfuscation Class</h1>
<div>
You can add sections of your Autohotkey code to an obfuscation class and you can make that class secured if you want. Function implementations and label implementations found within that section will be added to the class. Neither variables nor parameters can be added to classes at this time. To add stuff to a class, use the ADDFOLLOWING_TOCLASS command comment and specify a new class name. To stop adding stuff to a class, use that command without a class name:

<br>&nbsp;<br>;$OBFUSCATOR: $ADDFOLLOWING_TOCLASS: (new class name)

<br>&nbsp;<br>;function implementations and label implementations

<br>&nbsp;<br>;$OBFUSCATOR: $ADDFOLLOWING_TOCLASS:

<br>&nbsp;<br>That code will create a non secured class. The only use of a non secured class is to use it in a <a href="randomizeorder.htm">custom scrambling pallette</a>.
</div>

<h2><a name="addtosecclass"></a>Create a Secured Obfuscation Class</h2>
<div>
With secured classes you have the ability to 'break' whole sections of code at once and all calls to functions or labels within that section will become invalid. To create a secured class, use the CREATEOBJCLASS command below in addition to the ADDFOLLOWING_TOCLASS command:

<br>&nbsp;<br>;$OBFUSCATOR: $CREATEOBJCLASS: (new class name)

<br>&nbsp;<br>;$OBFUSCATOR: $ADDFOLLOWING_TOCLASS: (same class name)

<br>&nbsp;<br>;function implementations and label implementations

<br>&nbsp;<br>;$OBFUSCATOR: $ADDFOLLOWING_TOCLASS:

<br>&nbsp;<br>For every secured class you must use this series of statements below. These statements will dump both the function fragments and the label fragments for secured classes. 

<br>&nbsp;<br>;$OBFUSCATOR: $DUMP_SECFRAGS_FORCLASSES: (class or class list)
<br>;$OBFUSCATOR: $DUMPPOISENED_SECFRAGS_FORCLASSES: (class or class list)
<br>;$OBFUSCATOR: $DUMP_TMESSFRAGS_FORCLASSES: (class or class list)
<br>;$OBFUSCATOR: $DUMPFRAGS_FORCLASSES: (class or class list)

<br>&nbsp;<br>The security fragments must be dumped first, followed by the tmess fragments, followed by the fragments. To use the dump poisened fragments, use it before you dump the tmess fragments and the fragments. These statements can be used as many times in your code as you want including dumping the same fragments more than once. You can also nest them inside other things like if's:

<br>&nbsp;<br>if (securityfailed) {
<br>;$OBFUSCATOR: $DUMPPOISENED_SECFRAGS_FORCLASSES: myclass
<br>}

<br>&nbsp;<br>;Or do this
<br>if (securityfailed) {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poisenmyfrags()
<br>}
<br>poisenmyfrags() {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global
<br>;$OBFUSCATOR: $DUMPPOISENED_SECFRAGS_FORCLASSES: myclass
<br>}
</div>

</div>

<div id="rightcol">

</div>

</div>

</body>
</html>
