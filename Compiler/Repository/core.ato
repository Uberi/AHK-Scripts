;function factory factory
;creates a function signature that can be called with a body to create a callable function
fn := {
	scope := [base: ['_subscript: { $[args[1]] }.bind '$: $]] ;create internal scope
	args.each { scope[args[1]] := args[2] } ;add arguments to scope
	return { ;create function factory
		body := args[1]
		body.bind scope
	}
}

;chained comparison (x < y < z)
_compare := fn() {
	left := args[1]
	index := 2
	loop args.length // 2 { ;iterate over each comparison
		comparison := args[index]
		index += 1
		right := args[index]
		index += 1
		!($[comparison] left, right) ?
			return True
		left := right
	}
	False
}

loop := fn('count, 'index_var, 'index, 'body) {
	body ||= index || index_var
	index ||= 1
	(body.bind '$: $, index_var: start)()
	count != 1 ?
		loop count - 1, index_var, body, index + 1
}

with := fn('scope, 'body) {
	body.bind scope
	body()
}

match := fn('value, 'bodies, 'default) {
	body := bodies[value]
	body = None ?
		default ? default() : None
		: body()
}

Number.each := fn('body, 'index) {
	index ||= 1
	body index
	index != self ?
		self.each body, index + 1
}