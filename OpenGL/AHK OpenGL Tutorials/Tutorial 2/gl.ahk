;;;;;;;;;;;;;;;;;;;;
;; OpenGL Version ;;
;;;;;;;;;;;;;;;;;;;;

MAX_GL_VERSION := 4.2

if (!GL_VERSION)
{
  GL_VERSION := MAX_GL_VERSION
}


;;;;;;;;;;;;;;;;;;
;; OpenGL Types ;;
;;;;;;;;;;;;;;;;;;

if (GL_VERSION >= 1.0)
{
  GLenum := "uint"
  GLboolean := "uchar"
  GLbitfield := "uint"
  GLbyte := "char"
  GLshort := "short"
  GLint := "int"
  GLsizei := "int"
  GLubyte := "uchar"
  GLushort := "ushort"
  GLuint := "uint"
  GLfloat := "float"
  GLclampf := "float"
  GLdouble := "double"
  GLclampd := "double"
  GLvoid := ""
}
if (GL_VERSION >= 1.5)
{
  GLintptr := "uint"
  GLsizeiptr := "uint"
  GLintptrARB := "uint"
  GLsizeiptrARB := "uint"
  GLvdpauSurfaceNV := "uint"
  GLint64 := "int64"
  GLuint64 := "uint64"
  GLint64EXT := "int64"
  GLuint64EXT := "uint64"
  GLsync := "uint"
}
if (GL_VERSION >= 2.0)
{
  GLchar := "char"
  GLcharARB := "char"
  GLhandleARB := "uint"
  GLhalfARB := "ushort"
  GLhalfNV := "ushort"
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OpenGL Constant Definitions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

if (GL_VERSION >= 1.0)
{
  GL_BYTE := 0x1400
  GL_UNSIGNED_BYTE := 0x1401
  GL_SHORT := 0x1402
  GL_UNSIGNED_SHORT := 0x1403
  GL_INT := 0x1404
  GL_UNSIGNED_INT := 0x1405
  GL_FLOAT := 0x1406
  GL_DOUBLE := 0x140A
  GL_2_BYTES := 0x1407
  GL_3_BYTES := 0x1408
  GL_4_BYTES := 0x1409
  GL_POINTS := 0x0000
  GL_LINES := 0x0001
  GL_LINE_LOOP := 0x0002
  GL_LINE_STRIP := 0x0003
  GL_TRIANGLES := 0x0004
  GL_TRIANGLE_STRIP := 0x0005
  GL_TRIANGLE_FAN := 0x0006
  GL_QUADS := 0x0007
  GL_QUAD_STRIP := 0x0008
  GL_POLYGON := 0x0009
  GL_VERTEX_ARRAY := 0x8074
  GL_NORMAL_ARRAY := 0x8075
  GL_COLOR_ARRAY := 0x8076
  GL_INDEX_ARRAY := 0x8077
  GL_TEXTURE_COORD_ARRAY := 0x8078
  GL_EDGE_FLAG_ARRAY := 0x8079
  GL_VERTEX_ARRAY_SIZE := 0x807A
  GL_VERTEX_ARRAY_TYPE := 0x807B
  GL_VERTEX_ARRAY_STRIDE := 0x807C
  GL_NORMAL_ARRAY_TYPE := 0x807E
  GL_NORMAL_ARRAY_STRIDE := 0x807F
  GL_COLOR_ARRAY_SIZE := 0x8081
  GL_COLOR_ARRAY_TYPE := 0x8082
  GL_COLOR_ARRAY_STRIDE := 0x8083
  GL_INDEX_ARRAY_TYPE := 0x8085
  GL_INDEX_ARRAY_STRIDE := 0x8086
  GL_TEXTURE_COORD_ARRAY_SIZE := 0x8088
  GL_TEXTURE_COORD_ARRAY_TYPE := 0x8089
  GL_TEXTURE_COORD_ARRAY_STRIDE := 0x808A
  GL_EDGE_FLAG_ARRAY_STRIDE := 0x808C
  GL_VERTEX_ARRAY_POINTER := 0x808E
  GL_NORMAL_ARRAY_POINTER := 0x808F
  GL_COLOR_ARRAY_POINTER := 0x8090
  GL_INDEX_ARRAY_POINTER := 0x8091
  GL_TEXTURE_COORD_ARRAY_POINTER := 0x8092
  GL_EDGE_FLAG_ARRAY_POINTER := 0x8093
  GL_V2F := 0x2A20
  GL_V3F := 0x2A21
  GL_C4UB_V2F := 0x2A22
  GL_C4UB_V3F := 0x2A23
  GL_C3F_V3F := 0x2A24
  GL_N3F_V3F := 0x2A25
  GL_C4F_N3F_V3F := 0x2A26
  GL_T2F_V3F := 0x2A27
  GL_T4F_V4F := 0x2A28
  GL_T2F_C4UB_V3F := 0x2A29
  GL_T2F_C3F_V3F := 0x2A2A
  GL_T2F_N3F_V3F := 0x2A2B
  GL_T2F_C4F_N3F_V3F := 0x2A2C
  GL_T4F_C4F_N3F_V4F := 0x2A2D
  GL_MATRIX_MODE := 0x0BA0
  GL_MODELVIEW := 0x1700
  GL_PROJECTION := 0x1701
  GL_TEXTURE := 0x1702
  GL_POINT_SMOOTH := 0x0B10
  GL_POINT_SIZE := 0x0B11
  GL_POINT_SIZE_GRANULARITY := 0x0B13
  GL_POINT_SIZE_RANGE := 0x0B12
  GL_LINE_SMOOTH := 0x0B20
  GL_LINE_STIPPLE := 0x0B24
  GL_LINE_STIPPLE_PATTERN := 0x0B25
  GL_LINE_STIPPLE_REPEAT := 0x0B26
  GL_LINE_WIDTH := 0x0B21
  GL_LINE_WIDTH_GRANULARITY := 0x0B23
  GL_LINE_WIDTH_RANGE := 0x0B22
  GL_POINT := 0x1B00
  GL_LINE := 0x1B01
  GL_FILL := 0x1B02
  GL_CW := 0x0900
  GL_CCW := 0x0901
  GL_FRONT := 0x0404
  GL_BACK := 0x0405
  GL_POLYGON_MODE := 0x0B40
  GL_POLYGON_SMOOTH := 0x0B41
  GL_POLYGON_STIPPLE := 0x0B42
  GL_EDGE_FLAG := 0x0B43
  GL_CULL_FACE := 0x0B44
  GL_CULL_FACE_MODE := 0x0B45
  GL_FRONT_FACE := 0x0B46
  GL_POLYGON_OFFSET_FACTOR := 0x8038
  GL_POLYGON_OFFSET_UNITS := 0x2A00
  GL_POLYGON_OFFSET_POINT := 0x2A01
  GL_POLYGON_OFFSET_LINE := 0x2A02
  GL_POLYGON_OFFSET_FILL := 0x8037
  GL_COMPILE := 0x1300
  GL_COMPILE_AND_EXECUTE := 0x1301
  GL_LIST_BASE := 0x0B32
  GL_LIST_INDEX := 0x0B33
  GL_LIST_MODE := 0x0B30
  GL_NEVER := 0x0200
  GL_LESS := 0x0201
  GL_EQUAL := 0x0202
  GL_LEQUAL := 0x0203
  GL_GREATER := 0x0204
  GL_NOTEQUAL := 0x0205
  GL_GEQUAL := 0x0206
  GL_ALWAYS := 0x0207
  GL_DEPTH_TEST := 0x0B71
  GL_DEPTH_BITS := 0x0D56
  GL_DEPTH_CLEAR_VALUE := 0x0B73
  GL_DEPTH_FUNC := 0x0B74
  GL_DEPTH_RANGE := 0x0B70
  GL_DEPTH_WRITEMASK := 0x0B72
  GL_DEPTH_COMPONENT := 0x1902
  GL_LIGHTING := 0x0B50
  GL_LIGHT0 := 0x4000
  GL_LIGHT1 := 0x4001
  GL_LIGHT2 := 0x4002
  GL_LIGHT3 := 0x4003
  GL_LIGHT4 := 0x4004
  GL_LIGHT5 := 0x4005
  GL_LIGHT6 := 0x4006
  GL_LIGHT7 := 0x4007
  GL_SPOT_EXPONENT := 0x1205
  GL_SPOT_CUTOFF := 0x1206
  GL_CONSTANT_ATTENUATION := 0x1207
  GL_LINEAR_ATTENUATION := 0x1208
  GL_QUADRATIC_ATTENUATION := 0x1209
  GL_AMBIENT := 0x1200
  GL_DIFFUSE := 0x1201
  GL_SPECULAR := 0x1202
  GL_SHININESS := 0x1601
  GL_EMISSION := 0x1600
  GL_POSITION := 0x1203
  GL_SPOT_DIRECTION := 0x1204
  GL_AMBIENT_AND_DIFFUSE := 0x1602
  GL_COLOR_INDEXES := 0x1603
  GL_LIGHT_MODEL_TWO_SIDE := 0x0B52
  GL_LIGHT_MODEL_LOCAL_VIEWER := 0x0B51
  GL_LIGHT_MODEL_AMBIENT := 0x0B53
  GL_FRONT_AND_BACK := 0x0408
  GL_SHADE_MODEL := 0x0B54
  GL_FLAT := 0x1D00
  GL_SMOOTH := 0x1D01
  GL_COLOR_MATERIAL := 0x0B57
  GL_COLOR_MATERIAL_FACE := 0x0B55
  GL_COLOR_MATERIAL_PARAMETER := 0x0B56
  GL_NORMALIZE := 0x0BA1
  GL_CLIP_PLANE0 := 0x3000
  GL_CLIP_PLANE1 := 0x3001
  GL_CLIP_PLANE2 := 0x3002
  GL_CLIP_PLANE3 := 0x3003
  GL_CLIP_PLANE4 := 0x3004
  GL_CLIP_PLANE5 := 0x3005
  GL_ACCUM_RED_BITS := 0x0D58
  GL_ACCUM_GREEN_BITS := 0x0D59
  GL_ACCUM_BLUE_BITS := 0x0D5A
  GL_ACCUM_ALPHA_BITS := 0x0D5B
  GL_ACCUM_CLEAR_VALUE := 0x0B80
  GL_ACCUM := 0x0100
  GL_ADD := 0x0104
  GL_LOAD := 0x0101
  GL_MULT := 0x0103
  GL_RETURN := 0x0102
  GL_ALPHA_TEST := 0x0BC0
  GL_ALPHA_TEST_REF := 0x0BC2
  GL_ALPHA_TEST_FUNC := 0x0BC1
  GL_BLEND := 0x0BE2
  GL_BLEND_SRC := 0x0BE1
  GL_BLEND_DST := 0x0BE0
  GL_ZERO := 0x0
  GL_ONE := 0x1
  GL_SRC_COLOR := 0x0300
  GL_ONE_MINUS_SRC_COLOR := 0x0301
  GL_SRC_ALPHA := 0x0302
  GL_ONE_MINUS_SRC_ALPHA := 0x0303
  GL_DST_ALPHA := 0x0304
  GL_ONE_MINUS_DST_ALPHA := 0x0305
  GL_DST_COLOR := 0x0306
  GL_ONE_MINUS_DST_COLOR := 0x0307
  GL_SRC_ALPHA_SATURATE := 0x0308
  GL_CONSTANT_COLOR := 0x8001
  GL_ONE_MINUS_CONSTANT_COLOR := 0x8002
  GL_CONSTANT_ALPHA := 0x8003
  GL_ONE_MINUS_CONSTANT_ALPHA := 0x8004
  GL_FEEDBACK := 0x1C01
  GL_RENDER := 0x1C00
  GL_SELECT := 0x1C02
  GL_2D := 0x0600
  GL_3D := 0x0601
  GL_3D_COLOR := 0x0602
  GL_3D_COLOR_TEXTURE := 0x0603
  GL_4D_COLOR_TEXTURE := 0x0604
  GL_POINT_TOKEN := 0x0701
  GL_LINE_TOKEN := 0x0702
  GL_LINE_RESET_TOKEN := 0x0707
  GL_POLYGON_TOKEN := 0x0703
  GL_BITMAP_TOKEN := 0x0704
  GL_DRAW_PIXEL_TOKEN := 0x0705
  GL_COPY_PIXEL_TOKEN := 0x0706
  GL_PASS_THROUGH_TOKEN := 0x0700
  GL_FEEDBACK_BUFFER_POINTER := 0x0DF0
  GL_FEEDBACK_BUFFER_SIZE := 0x0DF1
  GL_FEEDBACK_BUFFER_TYPE := 0x0DF2
  GL_SELECTION_BUFFER_POINTER := 0x0DF3
  GL_SELECTION_BUFFER_SIZE := 0x0DF4
  GL_FOG := 0x0B60
  GL_FOG_MODE := 0x0B65
  GL_FOG_DENSITY := 0x0B62
  GL_FOG_COLOR := 0x0B66
  GL_FOG_INDEX := 0x0B61
  GL_FOG_START := 0x0B63
  GL_FOG_END := 0x0B64
  GL_LINEAR := 0x2601
  GL_EXP := 0x0800
  GL_EXP2 := 0x0801
  GL_LOGIC_OP := 0x0BF1
  GL_INDEX_LOGIC_OP := 0x0BF1
  GL_COLOR_LOGIC_OP := 0x0BF2
  GL_LOGIC_OP_MODE := 0x0BF0
  GL_CLEAR := 0x1500
  GL_SET := 0x150F
  GL_COPY := 0x1503
  GL_COPY_INVERTED := 0x150C
  GL_NOOP := 0x1505
  GL_INVERT := 0x150A
  GL_AND := 0x1501
  GL_NAND := 0x150E
  GL_OR := 0x1507
  GL_NOR := 0x1508
  GL_XOR := 0x1506
  GL_EQUIV := 0x1509
  GL_AND_REVERSE := 0x1502
  GL_AND_INVERTED := 0x1504
  GL_OR_REVERSE := 0x150B
  GL_OR_INVERTED := 0x150D
  GL_STENCIL_TEST := 0x0B90
  GL_STENCIL_WRITEMASK := 0x0B98
  GL_STENCIL_BITS := 0x0D57
  GL_STENCIL_FUNC := 0x0B92
  GL_STENCIL_VALUE_MASK := 0x0B93
  GL_STENCIL_REF := 0x0B97
  GL_STENCIL_FAIL := 0x0B94
  GL_STENCIL_PASS_DEPTH_PASS := 0x0B96
  GL_STENCIL_PASS_DEPTH_FAIL := 0x0B95
  GL_STENCIL_CLEAR_VALUE := 0x0B91
  GL_STENCIL_INDEX := 0x1901
  GL_KEEP := 0x1E00
  GL_REPLACE := 0x1E01
  GL_INCR := 0x1E02
  GL_DECR := 0x1E03
  GL_NONE := 0x0
  GL_LEFT := 0x0406
  GL_RIGHT := 0x0407
  GL_FRONT_LEFT := 0x0400
  GL_FRONT_RIGHT := 0x0401
  GL_BACK_LEFT := 0x0402
  GL_BACK_RIGHT := 0x0403
  GL_AUX0 := 0x0409
  GL_AUX1 := 0x040A
  GL_AUX2 := 0x040B
  GL_AUX3 := 0x040C
  GL_COLOR_INDEX := 0x1900
  GL_RED := 0x1903
  GL_GREEN := 0x1904
  GL_BLUE := 0x1905
  GL_ALPHA := 0x1906
  GL_LUMINANCE := 0x1909
  GL_LUMINANCE_ALPHA := 0x190A
  GL_ALPHA_BITS := 0x0D55
  GL_RED_BITS := 0x0D52
  GL_GREEN_BITS := 0x0D53
  GL_BLUE_BITS := 0x0D54
  GL_INDEX_BITS := 0x0D51
  GL_SUBPIXEL_BITS := 0x0D50
  GL_AUX_BUFFERS := 0x0C00
  GL_READ_BUFFER := 0x0C02
  GL_DRAW_BUFFER := 0x0C01
  GL_DOUBLEBUFFER := 0x0C32
  GL_STEREO := 0x0C33
  GL_BITMAP := 0x1A00
  GL_COLOR := 0x1800
  GL_DEPTH := 0x1801
  GL_STENCIL := 0x1802
  GL_DITHER := 0x0BD0
  GL_RGB := 0x1907
  GL_RGBA := 0x1908
  GL_MAX_LIST_NESTING := 0x0B31
  GL_MAX_ATTRIB_STACK_DEPTH := 0x0D35
  GL_MAX_MODELVIEW_STACK_DEPTH := 0x0D36
  GL_MAX_NAME_STACK_DEPTH := 0x0D37
  GL_MAX_PROJECTION_STACK_DEPTH := 0x0D38
  GL_MAX_TEXTURE_STACK_DEPTH := 0x0D39
  GL_MAX_EVAL_ORDER := 0x0D30
  GL_MAX_LIGHTS := 0x0D31
  GL_MAX_CLIP_PLANES := 0x0D32
  GL_MAX_TEXTURE_SIZE := 0x0D33
  GL_MAX_PIXEL_MAP_TABLE := 0x0D34
  GL_MAX_VIEWPORT_DIMS := 0x0D3A
  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH := 0x0D3B
  GL_ATTRIB_STACK_DEPTH := 0x0BB0
  GL_CLIENT_ATTRIB_STACK_DEPTH := 0x0BB1
  GL_COLOR_CLEAR_VALUE := 0x0C22
  GL_COLOR_WRITEMASK := 0x0C23
  GL_CURRENT_INDEX := 0x0B01
  GL_CURRENT_COLOR := 0x0B00
  GL_CURRENT_NORMAL := 0x0B02
  GL_CURRENT_RASTER_COLOR := 0x0B04
  GL_CURRENT_RASTER_DISTANCE := 0x0B09
  GL_CURRENT_RASTER_INDEX := 0x0B05
  GL_CURRENT_RASTER_POSITION := 0x0B07
  GL_CURRENT_RASTER_TEXTURE_COORDS := 0x0B06
  GL_CURRENT_RASTER_POSITION_VALID := 0x0B08
  GL_CURRENT_TEXTURE_COORDS := 0x0B03
  GL_INDEX_CLEAR_VALUE := 0x0C20
  GL_INDEX_MODE := 0x0C30
  GL_INDEX_WRITEMASK := 0x0C21
  GL_MODELVIEW_MATRIX := 0x0BA6
  GL_MODELVIEW_STACK_DEPTH := 0x0BA3
  GL_NAME_STACK_DEPTH := 0x0D70
  GL_PROJECTION_MATRIX := 0x0BA7
  GL_PROJECTION_STACK_DEPTH := 0x0BA4
  GL_RENDER_MODE := 0x0C40
  GL_RGBA_MODE := 0x0C31
  GL_TEXTURE_MATRIX := 0x0BA8
  GL_TEXTURE_STACK_DEPTH := 0x0BA5
  GL_VIEWPORT := 0x0BA2
  GL_AUTO_NORMAL := 0x0D80
  GL_MAP1_COLOR_4 := 0x0D90
  GL_MAP1_GRID_DOMAIN := 0x0DD0
  GL_MAP1_GRID_SEGMENTS := 0x0DD1
  GL_MAP1_INDEX := 0x0D91
  GL_MAP1_NORMAL := 0x0D92
  GL_MAP1_TEXTURE_COORD_1 := 0x0D93
  GL_MAP1_TEXTURE_COORD_2 := 0x0D94
  GL_MAP1_TEXTURE_COORD_3 := 0x0D95
  GL_MAP1_TEXTURE_COORD_4 := 0x0D96
  GL_MAP1_VERTEX_3 := 0x0D97
  GL_MAP1_VERTEX_4 := 0x0D98
  GL_MAP2_COLOR_4 := 0x0DB0
  GL_MAP2_GRID_DOMAIN := 0x0DD2
  GL_MAP2_GRID_SEGMENTS := 0x0DD3
  GL_MAP2_INDEX := 0x0DB1
  GL_MAP2_NORMAL := 0x0DB2
  GL_MAP2_TEXTURE_COORD_1 := 0x0DB3
  GL_MAP2_TEXTURE_COORD_2 := 0x0DB4
  GL_MAP2_TEXTURE_COORD_3 := 0x0DB5
  GL_MAP2_TEXTURE_COORD_4 := 0x0DB6
  GL_MAP2_VERTEX_3 := 0x0DB7
  GL_MAP2_VERTEX_4 := 0x0DB8
  GL_COEFF := 0x0A00
  GL_DOMAIN := 0x0A02
  GL_ORDER := 0x0A01
  GL_FOG_HINT := 0x0C54
  GL_LINE_SMOOTH_HINT := 0x0C52
  GL_PERSPECTIVE_CORRECTION_HINT := 0x0C50
  GL_POINT_SMOOTH_HINT := 0x0C51
  GL_POLYGON_SMOOTH_HINT := 0x0C53
  GL_DONT_CARE := 0x1100
  GL_FASTEST := 0x1101
  GL_NICEST := 0x1102
  GL_SCISSOR_TEST := 0x0C11
  GL_SCISSOR_BOX := 0x0C10
  GL_MAP_COLOR := 0x0D10
  GL_MAP_STENCIL := 0x0D11
  GL_INDEX_SHIFT := 0x0D12
  GL_INDEX_OFFSET := 0x0D13
  GL_RED_SCALE := 0x0D14
  GL_RED_BIAS := 0x0D15
  GL_GREEN_SCALE := 0x0D18
  GL_GREEN_BIAS := 0x0D19
  GL_BLUE_SCALE := 0x0D1A
  GL_BLUE_BIAS := 0x0D1B
  GL_ALPHA_SCALE := 0x0D1C
  GL_ALPHA_BIAS := 0x0D1D
  GL_DEPTH_SCALE := 0x0D1E
  GL_DEPTH_BIAS := 0x0D1F
  GL_PIXEL_MAP_S_TO_S_SIZE := 0x0CB1
  GL_PIXEL_MAP_I_TO_I_SIZE := 0x0CB0
  GL_PIXEL_MAP_I_TO_R_SIZE := 0x0CB2
  GL_PIXEL_MAP_I_TO_G_SIZE := 0x0CB3
  GL_PIXEL_MAP_I_TO_B_SIZE := 0x0CB4
  GL_PIXEL_MAP_I_TO_A_SIZE := 0x0CB5
  GL_PIXEL_MAP_R_TO_R_SIZE := 0x0CB6
  GL_PIXEL_MAP_G_TO_G_SIZE := 0x0CB7
  GL_PIXEL_MAP_B_TO_B_SIZE := 0x0CB8
  GL_PIXEL_MAP_A_TO_A_SIZE := 0x0CB9
  GL_PIXEL_MAP_S_TO_S := 0x0C71
  GL_PIXEL_MAP_I_TO_I := 0x0C70
  GL_PIXEL_MAP_I_TO_R := 0x0C72
  GL_PIXEL_MAP_I_TO_G := 0x0C73
  GL_PIXEL_MAP_I_TO_B := 0x0C74
  GL_PIXEL_MAP_I_TO_A := 0x0C75
  GL_PIXEL_MAP_R_TO_R := 0x0C76
  GL_PIXEL_MAP_G_TO_G := 0x0C77
  GL_PIXEL_MAP_B_TO_B := 0x0C78
  GL_PIXEL_MAP_A_TO_A := 0x0C79
  GL_PACK_ALIGNMENT := 0x0D05
  GL_PACK_LSB_FIRST := 0x0D01
  GL_PACK_ROW_LENGTH := 0x0D02
  GL_PACK_SKIP_PIXELS := 0x0D04
  GL_PACK_SKIP_ROWS := 0x0D03
  GL_PACK_SWAP_BYTES := 0x0D00
  GL_UNPACK_ALIGNMENT := 0x0CF5
  GL_UNPACK_LSB_FIRST := 0x0CF1
  GL_UNPACK_ROW_LENGTH := 0x0CF2
  GL_UNPACK_SKIP_PIXELS := 0x0CF4
  GL_UNPACK_SKIP_ROWS := 0x0CF3
  GL_UNPACK_SWAP_BYTES := 0x0CF0
  GL_ZOOM_X := 0x0D16
  GL_ZOOM_Y := 0x0D17
  GL_TEXTURE_ENV := 0x2300
  GL_TEXTURE_ENV_MODE := 0x2200
  GL_TEXTURE_1D := 0x0DE0
  GL_TEXTURE_2D := 0x0DE1
  GL_TEXTURE_WRAP_S := 0x2802
  GL_TEXTURE_WRAP_T := 0x2803
  GL_TEXTURE_MAG_FILTER := 0x2800
  GL_TEXTURE_MIN_FILTER := 0x2801
  GL_TEXTURE_ENV_COLOR := 0x2201
  GL_TEXTURE_GEN_S := 0x0C60
  GL_TEXTURE_GEN_T := 0x0C61
  GL_TEXTURE_GEN_MODE := 0x2500
  GL_TEXTURE_BORDER_COLOR := 0x1004
  GL_TEXTURE_WIDTH := 0x1000
  GL_TEXTURE_HEIGHT := 0x1001
  GL_TEXTURE_BORDER := 0x1005
  GL_TEXTURE_COMPONENTS := 0x1003
  GL_TEXTURE_RED_SIZE := 0x805C
  GL_TEXTURE_GREEN_SIZE := 0x805D
  GL_TEXTURE_BLUE_SIZE := 0x805E
  GL_TEXTURE_ALPHA_SIZE := 0x805F
  GL_TEXTURE_LUMINANCE_SIZE := 0x8060
  GL_TEXTURE_INTENSITY_SIZE := 0x8061
  GL_NEAREST_MIPMAP_NEAREST := 0x2700
  GL_NEAREST_MIPMAP_LINEAR := 0x2702
  GL_LINEAR_MIPMAP_NEAREST := 0x2701
  GL_LINEAR_MIPMAP_LINEAR := 0x2703
  GL_OBJECT_LINEAR := 0x2401
  GL_OBJECT_PLANE := 0x2501
  GL_EYE_LINEAR := 0x2400
  GL_EYE_PLANE := 0x2502
  GL_SPHERE_MAP := 0x2402
  GL_DECAL := 0x2101
  GL_MODULATE := 0x2100
  GL_NEAREST := 0x2600
  GL_REPEAT := 0x2901
  GL_CLAMP := 0x2900
  GL_S := 0x2000
  GL_T := 0x2001
  GL_R := 0x2002
  GL_Q := 0x2003
  GL_TEXTURE_GEN_R := 0x0C62
  GL_TEXTURE_GEN_Q := 0x0C63
  GL_VENDOR := 0x1F00
  GL_RENDERER := 0x1F01
  GL_VERSION := 0x1F02
  GL_EXTENSIONS := 0x1F03
  GL_NO_ERROR := 0x0
  GL_INVALID_VALUE := 0x0501
  GL_INVALID_ENUM := 0x0500
  GL_INVALID_OPERATION := 0x0502
  GL_STACK_OVERFLOW := 0x0503
  GL_STACK_UNDERFLOW := 0x0504
  GL_OUT_OF_MEMORY := 0x0505
  GL_CURRENT_BIT := 0x00000001
  GL_POINT_BIT := 0x00000002
  GL_LINE_BIT := 0x00000004
  GL_POLYGON_BIT := 0x00000008
  GL_POLYGON_STIPPLE_BIT := 0x00000010
  GL_PIXEL_MODE_BIT := 0x00000020
  GL_LIGHTING_BIT := 0x00000040
  GL_FOG_BIT := 0x00000080
  GL_DEPTH_BUFFER_BIT := 0x00000100
  GL_ACCUM_BUFFER_BIT := 0x00000200
  GL_STENCIL_BUFFER_BIT := 0x00000400
  GL_VIEWPORT_BIT := 0x00000800
  GL_TRANSFORM_BIT := 0x00001000
  GL_ENABLE_BIT := 0x00002000
  GL_COLOR_BUFFER_BIT := 0x00004000
  GL_HINT_BIT := 0x00008000
  GL_EVAL_BIT := 0x00010000
  GL_LIST_BIT := 0x00020000
  GL_TEXTURE_BIT := 0x00040000
  GL_SCISSOR_BIT := 0x00080000
  GL_ALL_ATTRIB_BITS := 0x000FFFFF
  GL_PROXY_TEXTURE_1D := 0x8063
  GL_PROXY_TEXTURE_2D := 0x8064
  GL_TEXTURE_PRIORITY := 0x8066
  GL_TEXTURE_RESIDENT := 0x8067
  GL_TEXTURE_BINDING_1D := 0x8068
  GL_TEXTURE_BINDING_2D := 0x8069
  GL_TEXTURE_INTERNAL_FORMAT := 0x1003
  GL_ALPHA4 := 0x803B
  GL_ALPHA8 := 0x803C
  GL_ALPHA12 := 0x803D
  GL_ALPHA16 := 0x803E
  GL_LUMINANCE4 := 0x803F
  GL_LUMINANCE8 := 0x8040
  GL_LUMINANCE12 := 0x8041
  GL_LUMINANCE16 := 0x8042
  GL_LUMINANCE4_ALPHA4 := 0x8043
  GL_LUMINANCE6_ALPHA2 := 0x8044
  GL_LUMINANCE8_ALPHA8 := 0x8045
  GL_LUMINANCE12_ALPHA4 := 0x8046
  GL_LUMINANCE12_ALPHA12 := 0x8047
  GL_LUMINANCE16_ALPHA16 := 0x8048
  GL_INTENSITY := 0x8049
  GL_INTENSITY4 := 0x804A
  GL_INTENSITY8 := 0x804B
  GL_INTENSITY12 := 0x804C
  GL_INTENSITY16 := 0x804D
  GL_R3_G3_B2 := 0x2A10
  GL_RGB4 := 0x804F
  GL_RGB5 := 0x8050
  GL_RGB8 := 0x8051
  GL_RGB10 := 0x8052
  GL_RGB12 := 0x8053
  GL_RGB16 := 0x8054
  GL_RGBA2 := 0x8055
  GL_RGBA4 := 0x8056
  GL_RGB5_A1 := 0x8057
  GL_RGBA8 := 0x8058
  GL_RGB10_A2 := 0x8059
  GL_RGBA12 := 0x805A
  GL_RGBA16 := 0x805B
  GL_CLIENT_PIXEL_STORE_BIT := 0x00000001
  GL_CLIENT_VERTEX_ARRAY_BIT := 0x00000002
  GL_ALL_CLIENT_ATTRIB_BITS := 0xFFFFFFFF
  GL_CLIENT_ALL_ATTRIB_BITS := 0xFFFFFFFF
  GL_RESCALE_NORMAL := 0x803A
  GL_CLAMP_TO_EDGE := 0x812F
  GL_MAX_ELEMENTS_VERTICES := 0x80E8
  GL_MAX_ELEMENTS_INDICES := 0x80E9
  GL_BGR := 0x80E0
  GL_BGRA := 0x80E1
  GL_UNSIGNED_BYTE_3_3_2 := 0x8032
  GL_UNSIGNED_BYTE_2_3_3_REV := 0x8362
  GL_UNSIGNED_SHORT_5_6_5 := 0x8363
  GL_UNSIGNED_SHORT_5_6_5_REV := 0x8364
  GL_UNSIGNED_SHORT_4_4_4_4 := 0x8033
  GL_UNSIGNED_SHORT_4_4_4_4_REV := 0x8365
  GL_UNSIGNED_SHORT_5_5_5_1 := 0x8034
  GL_UNSIGNED_SHORT_1_5_5_5_REV := 0x8366
  GL_UNSIGNED_INT_8_8_8_8 := 0x8035
  GL_UNSIGNED_INT_8_8_8_8_REV := 0x8367
  GL_UNSIGNED_INT_10_10_10_2 := 0x8036
  GL_UNSIGNED_INT_2_10_10_10_REV := 0x8368
  GL_LIGHT_MODEL_COLOR_CONTROL := 0x81F8
  GL_SINGLE_COLOR := 0x81F9
  GL_SEPARATE_SPECULAR_COLOR := 0x81FA
  GL_TEXTURE_MIN_LOD := 0x813A
  GL_TEXTURE_MAX_LOD := 0x813B
  GL_TEXTURE_BASE_LEVEL := 0x813C
  GL_TEXTURE_MAX_LEVEL := 0x813D
  GL_SMOOTH_POINT_SIZE_RANGE := 0x0B12
  GL_SMOOTH_POINT_SIZE_GRANULARITY := 0x0B13
  GL_SMOOTH_LINE_WIDTH_RANGE := 0x0B22
  GL_SMOOTH_LINE_WIDTH_GRANULARITY := 0x0B23
  GL_ALIASED_POINT_SIZE_RANGE := 0x846D
  GL_ALIASED_LINE_WIDTH_RANGE := 0x846E
  GL_PACK_SKIP_IMAGES := 0x806B
  GL_PACK_IMAGE_HEIGHT := 0x806C
  GL_UNPACK_SKIP_IMAGES := 0x806D
  GL_UNPACK_IMAGE_HEIGHT := 0x806E
  GL_TEXTURE_3D := 0x806F
  GL_PROXY_TEXTURE_3D := 0x8070
  GL_TEXTURE_DEPTH := 0x8071
  GL_TEXTURE_WRAP_R := 0x8072
  GL_MAX_3D_TEXTURE_SIZE := 0x8073
  GL_TEXTURE_BINDING_3D := 0x806A
  GL_COLOR_TABLE := 0x80D0
  GL_POST_CONVOLUTION_COLOR_TABLE := 0x80D1
  GL_POST_COLOR_MATRIX_COLOR_TABLE := 0x80D2
  GL_PROXY_COLOR_TABLE := 0x80D3
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE := 0x80D4
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE := 0x80D5
  GL_COLOR_TABLE_SCALE := 0x80D6
  GL_COLOR_TABLE_BIAS := 0x80D7
  GL_COLOR_TABLE_FORMAT := 0x80D8
  GL_COLOR_TABLE_WIDTH := 0x80D9
  GL_COLOR_TABLE_RED_SIZE := 0x80DA
  GL_COLOR_TABLE_GREEN_SIZE := 0x80DB
  GL_COLOR_TABLE_BLUE_SIZE := 0x80DC
  GL_COLOR_TABLE_ALPHA_SIZE := 0x80DD
  GL_COLOR_TABLE_LUMINANCE_SIZE := 0x80DE
  GL_COLOR_TABLE_INTENSITY_SIZE := 0x80DF
  GL_CONVOLUTION_1D := 0x8010
  GL_CONVOLUTION_2D := 0x8011
  GL_SEPARABLE_2D := 0x8012
  GL_CONVOLUTION_BORDER_MODE := 0x8013
  GL_CONVOLUTION_FILTER_SCALE := 0x8014
  GL_CONVOLUTION_FILTER_BIAS := 0x8015
  GL_REDUCE := 0x8016
  GL_CONVOLUTION_FORMAT := 0x8017
  GL_CONVOLUTION_WIDTH := 0x8018
  GL_CONVOLUTION_HEIGHT := 0x8019
  GL_MAX_CONVOLUTION_WIDTH := 0x801A
  GL_MAX_CONVOLUTION_HEIGHT := 0x801B
  GL_POST_CONVOLUTION_RED_SCALE := 0x801C
  GL_POST_CONVOLUTION_GREEN_SCALE := 0x801D
  GL_POST_CONVOLUTION_BLUE_SCALE := 0x801E
  GL_POST_CONVOLUTION_ALPHA_SCALE := 0x801F
  GL_POST_CONVOLUTION_RED_BIAS := 0x8020
  GL_POST_CONVOLUTION_GREEN_BIAS := 0x8021
  GL_POST_CONVOLUTION_BLUE_BIAS := 0x8022
  GL_POST_CONVOLUTION_ALPHA_BIAS := 0x8023
  GL_CONSTANT_BORDER := 0x8151
  GL_REPLICATE_BORDER := 0x8153
  GL_CONVOLUTION_BORDER_COLOR := 0x8154
  GL_COLOR_MATRIX := 0x80B1
  GL_COLOR_MATRIX_STACK_DEPTH := 0x80B2
  GL_MAX_COLOR_MATRIX_STACK_DEPTH := 0x80B3
  GL_POST_COLOR_MATRIX_RED_SCALE := 0x80B4
  GL_POST_COLOR_MATRIX_GREEN_SCALE := 0x80B5
  GL_POST_COLOR_MATRIX_BLUE_SCALE := 0x80B6
  GL_POST_COLOR_MATRIX_ALPHA_SCALE := 0x80B7
  GL_POST_COLOR_MATRIX_RED_BIAS := 0x80B8
  GL_POST_COLOR_MATRIX_GREEN_BIAS := 0x80B9
  GL_POST_COLOR_MATRIX_BLUE_BIAS := 0x80BA
  GL_POST_COLOR_MATRIX_ALPHA_BIAS := 0x80BB
  GL_HISTOGRAM := 0x8024
  GL_PROXY_HISTOGRAM := 0x8025
  GL_HISTOGRAM_WIDTH := 0x8026
  GL_HISTOGRAM_FORMAT := 0x8027
  GL_HISTOGRAM_RED_SIZE := 0x8028
  GL_HISTOGRAM_GREEN_SIZE := 0x8029
  GL_HISTOGRAM_BLUE_SIZE := 0x802A
  GL_HISTOGRAM_ALPHA_SIZE := 0x802B
  GL_HISTOGRAM_LUMINANCE_SIZE := 0x802C
  GL_HISTOGRAM_SINK := 0x802D
  GL_MINMAX := 0x802E
  GL_MINMAX_FORMAT := 0x802F
  GL_MINMAX_SINK := 0x8030
  GL_TABLE_TOO_LARGE := 0x8031
  GL_BLEND_EQUATION := 0x8009
  GL_MIN := 0x8007
  GL_MAX := 0x8008
  GL_FUNC_ADD := 0x8006
  GL_FUNC_SUBTRACT := 0x800A
  GL_FUNC_REVERSE_SUBTRACT := 0x800B
  GL_BLEND_COLOR := 0x8005
  GL_TEXTURE0 := 0x84C0
  GL_TEXTURE1 := 0x84C1
  GL_TEXTURE2 := 0x84C2
  GL_TEXTURE3 := 0x84C3
  GL_TEXTURE4 := 0x84C4
  GL_TEXTURE5 := 0x84C5
  GL_TEXTURE6 := 0x84C6
  GL_TEXTURE7 := 0x84C7
  GL_TEXTURE8 := 0x84C8
  GL_TEXTURE9 := 0x84C9
  GL_TEXTURE10 := 0x84CA
  GL_TEXTURE11 := 0x84CB
  GL_TEXTURE12 := 0x84CC
  GL_TEXTURE13 := 0x84CD
  GL_TEXTURE14 := 0x84CE
  GL_TEXTURE15 := 0x84CF
  GL_TEXTURE16 := 0x84D0
  GL_TEXTURE17 := 0x84D1
  GL_TEXTURE18 := 0x84D2
  GL_TEXTURE19 := 0x84D3
  GL_TEXTURE20 := 0x84D4
  GL_TEXTURE21 := 0x84D5
  GL_TEXTURE22 := 0x84D6
  GL_TEXTURE23 := 0x84D7
  GL_TEXTURE24 := 0x84D8
  GL_TEXTURE25 := 0x84D9
  GL_TEXTURE26 := 0x84DA
  GL_TEXTURE27 := 0x84DB
  GL_TEXTURE28 := 0x84DC
  GL_TEXTURE29 := 0x84DD
  GL_TEXTURE30 := 0x84DE
  GL_TEXTURE31 := 0x84DF
  GL_ACTIVE_TEXTURE := 0x84E0
  GL_CLIENT_ACTIVE_TEXTURE := 0x84E1
  GL_MAX_TEXTURE_UNITS := 0x84E2
  GL_NORMAL_MAP := 0x8511
  GL_REFLECTION_MAP := 0x8512
  GL_TEXTURE_CUBE_MAP := 0x8513
  GL_TEXTURE_BINDING_CUBE_MAP := 0x8514
  GL_TEXTURE_CUBE_MAP_POSITIVE_X := 0x8515
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X := 0x8516
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y := 0x8517
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y := 0x8518
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z := 0x8519
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z := 0x851A
  GL_PROXY_TEXTURE_CUBE_MAP := 0x851B
  GL_MAX_CUBE_MAP_TEXTURE_SIZE := 0x851C
  GL_COMPRESSED_ALPHA := 0x84E9
  GL_COMPRESSED_LUMINANCE := 0x84EA
  GL_COMPRESSED_LUMINANCE_ALPHA := 0x84EB
  GL_COMPRESSED_INTENSITY := 0x84EC
  GL_COMPRESSED_RGB := 0x84ED
  GL_COMPRESSED_RGBA := 0x84EE
  GL_TEXTURE_COMPRESSION_HINT := 0x84EF
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE := 0x86A0
  GL_TEXTURE_COMPRESSED := 0x86A1
  GL_NUM_COMPRESSED_TEXTURE_FORMATS := 0x86A2
  GL_COMPRESSED_TEXTURE_FORMATS := 0x86A3
  GL_MULTISAMPLE := 0x809D
  GL_SAMPLE_ALPHA_TO_COVERAGE := 0x809E
  GL_SAMPLE_ALPHA_TO_ONE := 0x809F
  GL_SAMPLE_COVERAGE := 0x80A0
  GL_SAMPLE_BUFFERS := 0x80A8
  GL_SAMPLES := 0x80A9
  GL_SAMPLE_COVERAGE_VALUE := 0x80AA
  GL_SAMPLE_COVERAGE_INVERT := 0x80AB
  GL_MULTISAMPLE_BIT := 0x20000000
  GL_TRANSPOSE_MODELVIEW_MATRIX := 0x84E3
  GL_TRANSPOSE_PROJECTION_MATRIX := 0x84E4
  GL_TRANSPOSE_TEXTURE_MATRIX := 0x84E5
  GL_TRANSPOSE_COLOR_MATRIX := 0x84E6
  GL_COMBINE := 0x8570
  GL_COMBINE_RGB := 0x8571
  GL_COMBINE_ALPHA := 0x8572
  GL_SOURCE0_RGB := 0x8580
  GL_SOURCE1_RGB := 0x8581
  GL_SOURCE2_RGB := 0x8582
  GL_SOURCE0_ALPHA := 0x8588
  GL_SOURCE1_ALPHA := 0x8589
  GL_SOURCE2_ALPHA := 0x858A
  GL_OPERAND0_RGB := 0x8590
  GL_OPERAND1_RGB := 0x8591
  GL_OPERAND2_RGB := 0x8592
  GL_OPERAND0_ALPHA := 0x8598
  GL_OPERAND1_ALPHA := 0x8599
  GL_OPERAND2_ALPHA := 0x859A
  GL_RGB_SCALE := 0x8573
  GL_ADD_SIGNED := 0x8574
  GL_INTERPOLATE := 0x8575
  GL_SUBTRACT := 0x84E7
  GL_CONSTANT := 0x8576
  GL_PRIMARY_COLOR := 0x8577
  GL_PREVIOUS := 0x8578
  GL_DOT3_RGB := 0x86AE
  GL_DOT3_RGBA := 0x86AF
  GL_CLAMP_TO_BORDER := 0x812D
  
  GL_DEPTH_BUFFER_BIT := 0x00000100
  GL_STENCIL_BUFFER_BIT := 0x00000400
  GL_COLOR_BUFFER_BIT := 0x00004000
  
  GL_FALSE := 0
  GL_TRUE := 1
  
  GL_POINTS := 0x0000
  GL_LINES := 0x0001
  GL_LINE_LOOP := 0x0002
  GL_LINE_STRIP := 0x0003
  GL_TRIANGLES := 0x0004
  GL_TRIANGLE_STRIP := 0x0005
  GL_TRIANGLE_FAN := 0x0006
  
  GL_NEVER := 0x0200
  GL_LESS := 0x0201
  GL_EQUAL := 0x0202
  GL_LEQUAL := 0x0203
  GL_GREATER := 0x0204
  GL_NOTEQUAL := 0x0205
  GL_GEQUAL := 0x0206
  GL_ALWAYS := 0x0207
  
  GL_ZERO := 0
  GL_ONE := 1
  GL_SRC_COLOR := 0x0300
  GL_ONE_MINUS_SRC_COLOR := 0x0301
  GL_SRC_ALPHA := 0x0302
  GL_ONE_MINUS_SRC_ALPHA := 0x0303
  GL_DST_ALPHA := 0x0304
  GL_ONE_MINUS_DST_ALPHA := 0x0305
  
  GL_DST_COLOR := 0x0306
  GL_ONE_MINUS_DST_COLOR := 0x0307
  GL_SRC_ALPHA_SATURATE := 0x0308
  
  GL_NONE := 0
  GL_FRONT_LEFT := 0x0400
  GL_FRONT_RIGHT := 0x0401
  GL_BACK_LEFT := 0x0402
  GL_BACK_RIGHT := 0x0403
  GL_FRONT := 0x0404
  GL_BACK := 0x0405
  GL_LEFT := 0x0406
  GL_RIGHT := 0x0407
  GL_FRONT_AND_BACK := 0x0408
  
  GL_NO_ERROR := 0
  GL_INVALID_ENUM := 0x0500
  GL_INVALID_VALUE := 0x0501
  GL_INVALID_OPERATION := 0x0502
  GL_OUT_OF_MEMORY := 0x0505
  
  GL_CW := 0x0900
  GL_CCW := 0x0901
  
  GL_POINT_SIZE := 0x0B11
  GL_POINT_SIZE_RANGE := 0x0B12
  GL_POINT_SIZE_GRANULARITY := 0x0B13
  GL_LINE_SMOOTH := 0x0B20
  GL_LINE_WIDTH := 0x0B21
  GL_LINE_WIDTH_RANGE := 0x0B22
  GL_LINE_WIDTH_GRANULARITY := 0x0B23
  GL_POLYGON_SMOOTH := 0x0B41
  GL_CULL_FACE := 0x0B44
  GL_CULL_FACE_MODE := 0x0B45
  GL_FRONT_FACE := 0x0B46
  GL_DEPTH_RANGE := 0x0B70
  GL_DEPTH_TEST := 0x0B71
  GL_DEPTH_WRITEMASK := 0x0B72
  GL_DEPTH_CLEAR_VALUE := 0x0B73
  GL_DEPTH_FUNC := 0x0B74
  GL_STENCIL_TEST := 0x0B90
  GL_STENCIL_CLEAR_VALUE := 0x0B91
  GL_STENCIL_FUNC := 0x0B92
  GL_STENCIL_VALUE_MASK := 0x0B93
  GL_STENCIL_FAIL := 0x0B94
  GL_STENCIL_PASS_DEPTH_FAIL := 0x0B95
  GL_STENCIL_PASS_DEPTH_PASS := 0x0B96
  GL_STENCIL_REF := 0x0B97
  GL_STENCIL_WRITEMASK := 0x0B98
  GL_VIEWPORT := 0x0BA2
  GL_DITHER := 0x0BD0
  GL_BLEND_DST := 0x0BE0
  GL_BLEND_SRC := 0x0BE1
  GL_BLEND := 0x0BE2
  GL_LOGIC_OP_MODE := 0x0BF0
  GL_COLOR_LOGIC_OP := 0x0BF2
  GL_DRAW_BUFFER := 0x0C01
  GL_READ_BUFFER := 0x0C02
  GL_SCISSOR_BOX := 0x0C10
  GL_SCISSOR_TEST := 0x0C11
  GL_COLOR_CLEAR_VALUE := 0x0C22
  GL_COLOR_WRITEMASK := 0x0C23
  GL_DOUBLEBUFFER := 0x0C32
  GL_STEREO := 0x0C33
  GL_LINE_SMOOTH_HINT := 0x0C52
  GL_POLYGON_SMOOTH_HINT := 0x0C53
  GL_UNPACK_SWAP_BYTES := 0x0CF0
  GL_UNPACK_LSB_FIRST := 0x0CF1
  GL_UNPACK_ROW_LENGTH := 0x0CF2
  GL_UNPACK_SKIP_ROWS := 0x0CF3
  GL_UNPACK_SKIP_PIXELS := 0x0CF4
  GL_UNPACK_ALIGNMENT := 0x0CF5
  GL_PACK_SWAP_BYTES := 0x0D00
  GL_PACK_LSB_FIRST := 0x0D01
  GL_PACK_ROW_LENGTH := 0x0D02
  GL_PACK_SKIP_ROWS := 0x0D03
  GL_PACK_SKIP_PIXELS := 0x0D04
  GL_PACK_ALIGNMENT := 0x0D05
  GL_MAX_TEXTURE_SIZE := 0x0D33
  GL_MAX_VIEWPORT_DIMS := 0x0D3A
  GL_SUBPIXEL_BITS := 0x0D50
  GL_TEXTURE_1D := 0x0DE0
  GL_TEXTURE_2D := 0x0DE1
  GL_POLYGON_OFFSET_UNITS := 0x2A00
  GL_POLYGON_OFFSET_POINT := 0x2A01
  GL_POLYGON_OFFSET_LINE := 0x2A02
  GL_POLYGON_OFFSET_FILL := 0x8037
  GL_POLYGON_OFFSET_FACTOR := 0x8038
  GL_TEXTURE_BINDING_1D := 0x8068
  GL_TEXTURE_BINDING_2D := 0x8069
  
  GL_TEXTURE_WIDTH := 0x1000
  GL_TEXTURE_HEIGHT := 0x1001
  GL_TEXTURE_INTERNAL_FORMAT := 0x1003
  GL_TEXTURE_BORDER_COLOR := 0x1004
  GL_TEXTURE_RED_SIZE := 0x805C
  GL_TEXTURE_GREEN_SIZE := 0x805D
  GL_TEXTURE_BLUE_SIZE := 0x805E
  GL_TEXTURE_ALPHA_SIZE := 0x805F
  
  GL_DONT_CARE := 0x1100
  GL_FASTEST := 0x1101
  GL_NICEST := 0x1102
  
  GL_BYTE := 0x1400
  GL_UNSIGNED_BYTE := 0x1401
  GL_SHORT := 0x1402
  GL_UNSIGNED_SHORT := 0x1403
  GL_INT := 0x1404
  GL_UNSIGNED_INT := 0x1405
  GL_FLOAT := 0x1406
  GL_DOUBLE := 0x140A
  
  GL_CLEAR := 0x1500
  GL_AND := 0x1501
  GL_AND_REVERSE := 0x1502
  GL_COPY := 0x1503
  GL_AND_INVERTED := 0x1504
  GL_NOOP := 0x1505
  GL_XOR := 0x1506
  GL_OR := 0x1507
  GL_NOR := 0x1508
  GL_EQUIV := 0x1509
  GL_INVERT := 0x150A
  GL_OR_REVERSE := 0x150B
  GL_COPY_INVERTED := 0x150C
  GL_OR_INVERTED := 0x150D
  GL_NAND := 0x150E
  GL_SET := 0x150F
  
  GL_TEXTURE := 0x1702
  
  GL_COLOR := 0x1800
  GL_DEPTH := 0x1801
  GL_STENCIL := 0x1802
  
  GL_STENCIL_INDEX := 0x1901
  GL_DEPTH_COMPONENT := 0x1902
  GL_RED := 0x1903
  GL_GREEN := 0x1904
  GL_BLUE := 0x1905
  GL_ALPHA := 0x1906
  GL_RGB := 0x1907
  GL_RGBA := 0x1908
  
  GL_POINT := 0x1B00
  GL_LINE := 0x1B01
  GL_FILL := 0x1B02
  
  GL_KEEP := 0x1E00
  GL_REPLACE := 0x1E01
  GL_INCR := 0x1E02
  GL_DECR := 0x1E03
  
  GL_VENDOR := 0x1F00
  GL_RENDERER := 0x1F01
  GL_VERSION := 0x1F02
  GL_EXTENSIONS := 0x1F03
  
  GL_NEAREST := 0x2600
  GL_LINEAR := 0x2601
  
  GL_NEAREST_MIPMAP_NEAREST := 0x2700
  GL_LINEAR_MIPMAP_NEAREST := 0x2701
  GL_NEAREST_MIPMAP_LINEAR := 0x2702
  GL_LINEAR_MIPMAP_LINEAR := 0x2703
  
  GL_TEXTURE_MAG_FILTER := 0x2800
  GL_TEXTURE_MIN_FILTER := 0x2801
  GL_TEXTURE_WRAP_S := 0x2802
  GL_TEXTURE_WRAP_T := 0x2803
  
  GL_PROXY_TEXTURE_1D := 0x8063
  GL_PROXY_TEXTURE_2D := 0x8064
  
  GL_REPEAT := 0x2901
  
  GL_R3_G3_B2 := 0x2A10
  GL_RGB4 := 0x804F
  GL_RGB5 := 0x8050
  GL_RGB8 := 0x8051
  GL_RGB10 := 0x8052
  GL_RGB12 := 0x8053
  GL_RGB16 := 0x8054
  GL_RGBA2 := 0x8055
  GL_RGBA4 := 0x8056
  GL_RGB5_A1 := 0x8057
  GL_RGBA8 := 0x8058
  GL_RGB10_A2 := 0x8059
  GL_RGBA12 := 0x805A
  GL_RGBA16 := 0x805B
    GL_DEPTH_COMPONENT32F := 0x8CAC
  GL_DEPTH32F_STENCIL8 := 0x8CAD
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV := 0x8DAD
  
  GL_INVALID_FRAMEBUFFER_OPERATION := 0x0506
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING := 0x8210
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE := 0x8211
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE := 0x8212
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE := 0x8213
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE := 0x8214
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE := 0x8215
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE := 0x8216
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE := 0x8217
  GL_FRAMEBUFFER_DEFAULT := 0x8218
  GL_FRAMEBUFFER_UNDEFINED := 0x8219
  GL_DEPTH_STENCIL_ATTACHMENT := 0x821A
  GL_MAX_RENDERBUFFER_SIZE := 0x84E8
  GL_DEPTH_STENCIL := 0x84F9
  GL_UNSIGNED_INT_24_8 := 0x84FA
  GL_DEPTH24_STENCIL8 := 0x88F0
  GL_TEXTURE_STENCIL_SIZE := 0x88F1
  GL_TEXTURE_RED_TYPE := 0x8C10
  GL_TEXTURE_GREEN_TYPE := 0x8C11
  GL_TEXTURE_BLUE_TYPE := 0x8C12
  GL_TEXTURE_ALPHA_TYPE := 0x8C13
  GL_TEXTURE_DEPTH_TYPE := 0x8C16
  GL_UNSIGNED_NORMALIZED := 0x8C17
  GL_FRAMEBUFFER_BINDING := 0x8CA6
  GL_DRAW_FRAMEBUFFER_BINDING := GL_FRAMEBUFFER_BINDING
  GL_RENDERBUFFER_BINDING := 0x8CA7
  GL_READ_FRAMEBUFFER := 0x8CA8
  GL_DRAW_FRAMEBUFFER := 0x8CA9
  GL_READ_FRAMEBUFFER_BINDING := 0x8CAA
  GL_RENDERBUFFER_SAMPLES := 0x8CAB
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE := 0x8CD0
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME := 0x8CD1
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL := 0x8CD2
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE := 0x8CD3
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER := 0x8CD4
  GL_FRAMEBUFFER_COMPLETE := 0x8CD5
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT := 0x8CD6
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT := 0x8CD7
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER := 0x8CDB
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER := 0x8CDC
  GL_FRAMEBUFFER_UNSUPPORTED := 0x8CDD
  GL_MAX_COLOR_ATTACHMENTS := 0x8CDF
  GL_COLOR_ATTACHMENT0 := 0x8CE0
  GL_COLOR_ATTACHMENT1 := 0x8CE1
  GL_COLOR_ATTACHMENT2 := 0x8CE2
  GL_COLOR_ATTACHMENT3 := 0x8CE3
  GL_COLOR_ATTACHMENT4 := 0x8CE4
  GL_COLOR_ATTACHMENT5 := 0x8CE5
  GL_COLOR_ATTACHMENT6 := 0x8CE6
  GL_COLOR_ATTACHMENT7 := 0x8CE7
  GL_COLOR_ATTACHMENT8 := 0x8CE8
  GL_COLOR_ATTACHMENT9 := 0x8CE9
  GL_COLOR_ATTACHMENT10 := 0x8CEA
  GL_COLOR_ATTACHMENT11 := 0x8CEB
  GL_COLOR_ATTACHMENT12 := 0x8CEC
  GL_COLOR_ATTACHMENT13 := 0x8CED
  GL_COLOR_ATTACHMENT14 := 0x8CEE
  GL_COLOR_ATTACHMENT15 := 0x8CEF
  GL_DEPTH_ATTACHMENT := 0x8D00
  GL_STENCIL_ATTACHMENT := 0x8D20
  GL_FRAMEBUFFER := 0x8D40
  GL_RENDERBUFFER := 0x8D41
  GL_RENDERBUFFER_WIDTH := 0x8D42
  GL_RENDERBUFFER_HEIGHT := 0x8D43
  GL_RENDERBUFFER_INTERNAL_FORMAT := 0x8D44
  GL_STENCIL_INDEX1 := 0x8D46
  GL_STENCIL_INDEX4 := 0x8D47
  GL_STENCIL_INDEX8 := 0x8D48
  GL_STENCIL_INDEX16 := 0x8D49
  GL_RENDERBUFFER_RED_SIZE := 0x8D50
  GL_RENDERBUFFER_GREEN_SIZE := 0x8D51
  GL_RENDERBUFFER_BLUE_SIZE := 0x8D52
  GL_RENDERBUFFER_ALPHA_SIZE := 0x8D53
  GL_RENDERBUFFER_DEPTH_SIZE := 0x8D54
  GL_RENDERBUFFER_STENCIL_SIZE := 0x8D55
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE := 0x8D56
  GL_MAX_SAMPLES := 0x8D57
  
  GL_FRAMEBUFFER_SRGB := 0x8DB9
  
  GL_HALF_FLOAT := 0x140B
  
  GL_MAP_READ_BIT := 0x0001
  GL_MAP_WRITE_BIT := 0x0002
  GL_MAP_INVALIDATE_RANGE_BIT := 0x0004
  GL_MAP_INVALIDATE_BUFFER_BIT := 0x0008
  GL_MAP_FLUSH_EXPLICIT_BIT := 0x0010
  GL_MAP_UNSYNCHRONIZED_BIT := 0x0020
  
  GL_COMPRESSED_RED_RGTC1 := 0x8DBB
  GL_COMPRESSED_SIGNED_RED_RGTC1 := 0x8DBC
  GL_COMPRESSED_RG_RGTC2 := 0x8DBD
  GL_COMPRESSED_SIGNED_RG_RGTC2 := 0x8DBE
  
  GL_RG := 0x8227
  GL_RG_INTEGER := 0x8228
  GL_R8 := 0x8229
  GL_R16 := 0x822A
  GL_RG8 := 0x822B
  GL_RG16 := 0x822C
  GL_R16F := 0x822D
  GL_R32F := 0x822E
  GL_RG16F := 0x822F
  GL_RG32F := 0x8230
  GL_R8I := 0x8231
  GL_R8UI := 0x8232
  GL_R16I := 0x8233
  GL_R16UI := 0x8234
  GL_R32I := 0x8235
  GL_R32UI := 0x8236
  GL_RG8I := 0x8237
  GL_RG8UI := 0x8238
  GL_RG16I := 0x8239
  GL_RG16UI := 0x823A
  GL_RG32I := 0x823B
  GL_RG32UI := 0x823C
  
  GL_VERTEX_ARRAY_BINDING := 0x85B5
  
  GL_UNIFORM_BUFFER := 0x8A11
  GL_UNIFORM_BUFFER_BINDING := 0x8A28
  GL_UNIFORM_BUFFER_START := 0x8A29
  GL_UNIFORM_BUFFER_SIZE := 0x8A2A
  GL_MAX_VERTEX_UNIFORM_BLOCKS := 0x8A2B
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS := 0x8A2C
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS := 0x8A2D
  GL_MAX_COMBINED_UNIFORM_BLOCKS := 0x8A2E
  GL_MAX_UNIFORM_BUFFER_BINDINGS := 0x8A2F
  GL_MAX_UNIFORM_BLOCK_SIZE := 0x8A30
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS := 0x8A31
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS := 0x8A32
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS := 0x8A33
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT := 0x8A34
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH := 0x8A35
  GL_ACTIVE_UNIFORM_BLOCKS := 0x8A36
  GL_UNIFORM_TYPE := 0x8A37
  GL_UNIFORM_SIZE := 0x8A38
  GL_UNIFORM_NAME_LENGTH := 0x8A39
  GL_UNIFORM_BLOCK_INDEX := 0x8A3A
  GL_UNIFORM_OFFSET := 0x8A3B
  GL_UNIFORM_ARRAY_STRIDE := 0x8A3C
  GL_UNIFORM_MATRIX_STRIDE := 0x8A3D
  GL_UNIFORM_IS_ROW_MAJOR := 0x8A3E
  GL_UNIFORM_BLOCK_BINDING := 0x8A3F
  GL_UNIFORM_BLOCK_DATA_SIZE := 0x8A40
  GL_UNIFORM_BLOCK_NAME_LENGTH := 0x8A41
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS := 0x8A42
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES := 0x8A43
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER := 0x8A44
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER := 0x8A45
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER := 0x8A46
  GL_INVALID_INDEX := 0xFFFFFFFF
  
  GL_COPY_READ_BUFFER := 0x8F36
  GL_COPY_WRITE_BUFFER := 0x8F37
  
  GL_DEPTH_CLAMP := 0x864F
  
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION := 0x8E4C
  GL_FIRST_VERTEX_CONVENTION := 0x8E4D
  GL_LAST_VERTEX_CONVENTION := 0x8E4E
  GL_PROVOKING_VERTEX := 0x8E4F
  
  GL_TEXTURE_CUBE_MAP_SEAMLESS := 0x884F
  
  GL_MAX_SERVER_WAIT_TIMEOUT := 0x9111
  GL_OBJECT_TYPE := 0x9112
  GL_SYNC_CONDITION := 0x9113
  GL_SYNC_STATUS := 0x9114
  GL_SYNC_FLAGS := 0x9115
  GL_SYNC_FENCE := 0x9116
  GL_SYNC_GPU_COMMANDS_COMPLETE := 0x9117
  GL_UNSIGNALED := 0x9118
  GL_SIGNALED := 0x9119
  GL_ALREADY_SIGNALED := 0x911A
  GL_TIMEOUT_EXPIRED := 0x911B
  GL_CONDITION_SATISFIED := 0x911C
  GL_WAIT_FAILED := 0x911D
  GL_SYNC_FLUSH_COMMANDS_BIT := 0x00000001
  GL_TIMEOUT_IGNORED := 0xFFFFFFFFFFFFFFFF
  
  GL_SAMPLE_POSITION := 0x8E50
  GL_SAMPLE_MASK := 0x8E51
  GL_SAMPLE_MASK_VALUE := 0x8E52
  GL_MAX_SAMPLE_MASK_WORDS := 0x8E59
  GL_TEXTURE_2D_MULTISAMPLE := 0x9100
  GL_PROXY_TEXTURE_2D_MULTISAMPLE := 0x9101
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY := 0x9102
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY := 0x9103
  GL_TEXTURE_BINDING_2D_MULTISAMPLE := 0x9104
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY := 0x9105
  GL_TEXTURE_SAMPLES := 0x9106
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS := 0x9107
  GL_SAMPLER_2D_MULTISAMPLE := 0x9108
  GL_INT_SAMPLER_2D_MULTISAMPLE := 0x9109
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE := 0x910A
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY := 0x910B
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY := 0x910C
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY := 0x910D
  GL_MAX_COLOR_TEXTURE_SAMPLES := 0x910E
  GL_MAX_DEPTH_TEXTURE_SAMPLES := 0x910F
  GL_MAX_INTEGER_SAMPLES := 0x9110
  
  GL_SAMPLE_SHADING_ARB := 0x8C36
  GL_MIN_SAMPLE_SHADING_VALUE_ARB := 0x8C37
  
  GL_TEXTURE_CUBE_MAP_ARRAY_ARB := 0x9009
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB := 0x900A
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB := 0x900B
  GL_SAMPLER_CUBE_MAP_ARRAY_ARB := 0x900C
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB := 0x900D
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB := 0x900E
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB := 0x900F
  
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB := 0x8E5E
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB := 0x8E5F
  
  GL_SHADER_INCLUDE_ARB := 0x8DAE
  GL_NAMED_STRING_LENGTH_ARB := 0x8DE9
  GL_NAMED_STRING_TYPE_ARB := 0x8DEA
  
  GL_COMPRESSED_RGBA_BPTC_UNORM_ARB := 0x8E8C
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB := 0x8E8D
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB := 0x8E8E
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB := 0x8E8F
  
  GL_SRC1_COLOR := 0x88F9
  GL_ONE_MINUS_SRC1_COLOR := 0x88FA
  GL_ONE_MINUS_SRC1_ALPHA := 0x88FB
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS := 0x88FC
  
  GL_ANY_SAMPLES_PASSED := 0x8C2F
  
  GL_SAMPLER_BINDING := 0x8919
  
  GL_RGB10_A2UI := 0x906F
  
  GL_TEXTURE_SWIZZLE_R := 0x8E42
  GL_TEXTURE_SWIZZLE_G := 0x8E43
  GL_TEXTURE_SWIZZLE_B := 0x8E44
  GL_TEXTURE_SWIZZLE_A := 0x8E45
  GL_TEXTURE_SWIZZLE_RGBA := 0x8E46
  
  GL_TIME_ELAPSED := 0x88BF
  GL_TIMESTAMP := 0x8E28
  
  GL_INT_2_10_10_10_REV := 0x8D9F
  
  GL_DRAW_INDIRECT_BUFFER := 0x8F3F
  GL_DRAW_INDIRECT_BUFFER_BINDING := 0x8F43
  
  GL_GEOMETRY_SHADER_INVOCATIONS := 0x887F
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS := 0x8E5A
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET := 0x8E5B
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET := 0x8E5C
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS := 0x8E5D
  
  GL_DOUBLE_VEC2 := 0x8FFC
  GL_DOUBLE_VEC3 := 0x8FFD
  GL_DOUBLE_VEC4 := 0x8FFE
  GL_DOUBLE_MAT2 := 0x8F46
  GL_DOUBLE_MAT3 := 0x8F47
  GL_DOUBLE_MAT4 := 0x8F48
  GL_DOUBLE_MAT2x3 := 0x8F49
  GL_DOUBLE_MAT2x4 := 0x8F4A
  GL_DOUBLE_MAT3x2 := 0x8F4B
  GL_DOUBLE_MAT3x4 := 0x8F4C
  GL_DOUBLE_MAT4x2 := 0x8F4D
  GL_DOUBLE_MAT4x3 := 0x8F4E
  
  GL_ACTIVE_SUBROUTINES := 0x8DE5
  GL_ACTIVE_SUBROUTINE_UNIFORMS := 0x8DE6
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS := 0x8E47
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH := 0x8E48
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH := 0x8E49
  GL_MAX_SUBROUTINES := 0x8DE7
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS := 0x8DE8
  GL_NUM_COMPATIBLE_SUBROUTINES := 0x8E4A
  GL_COMPATIBLE_SUBROUTINES := 0x8E4B
  
  GL_PATCHES := 0x000E
  GL_PATCH_VERTICES := 0x8E72
  GL_PATCH_DEFAULT_INNER_LEVEL := 0x8E73
  GL_PATCH_DEFAULT_OUTER_LEVEL := 0x8E74
  GL_TESS_CONTROL_OUTPUT_VERTICES := 0x8E75
  GL_TESS_GEN_MODE := 0x8E76
  GL_TESS_GEN_SPACING := 0x8E77
  GL_TESS_GEN_VERTEX_ORDER := 0x8E78
  GL_TESS_GEN_POINT_MODE := 0x8E79
  GL_ISOLINES := 0x8E7A
  GL_FRACTIONAL_ODD := 0x8E7B
  GL_FRACTIONAL_EVEN := 0x8E7C
  GL_MAX_PATCH_VERTICES := 0x8E7D
  GL_MAX_TESS_GEN_LEVEL := 0x8E7E
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS := 0x8E7F
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS := 0x8E80
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS := 0x8E81
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS := 0x8E82
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS := 0x8E83
  GL_MAX_TESS_PATCH_COMPONENTS := 0x8E84
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS := 0x8E85
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS := 0x8E86
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS := 0x8E89
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS := 0x8E8A
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS := 0x886C
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS := 0x886D
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS := 0x8E1E
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS := 0x8E1F
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER := 0x84F0
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER := 0x84F1
  GL_TESS_EVALUATION_SHADER := 0x8E87
  GL_TESS_CONTROL_SHADER := 0x8E88
  
  GL_TRANSFORM_FEEDBACK := 0x8E22
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED := 0x8E23
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE := 0x8E24
  GL_TRANSFORM_FEEDBACK_BINDING := 0x8E25
  
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS := 0x8E70
  GL_MAX_VERTEX_STREAMS := 0x8E71
  
  GL_FIXED := 0x140C
  GL_IMPLEMENTATION_COLOR_READ_TYPE := 0x8B9A
  GL_IMPLEMENTATION_COLOR_READ_FORMAT := 0x8B9B
  GL_LOW_FLOAT := 0x8DF0
  GL_MEDIUM_FLOAT := 0x8DF1
  GL_HIGH_FLOAT := 0x8DF2
  GL_LOW_INT := 0x8DF3
  GL_MEDIUM_INT := 0x8DF4
  GL_HIGH_INT := 0x8DF5
  GL_SHADER_COMPILER := 0x8DFA
  GL_NUM_SHADER_BINARY_FORMATS := 0x8DF9
  GL_MAX_VERTEX_UNIFORM_VECTORS := 0x8DFB
  GL_MAX_VARYING_VECTORS := 0x8DFC
  GL_MAX_FRAGMENT_UNIFORM_VECTORS := 0x8DFD
  
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT := 0x8257
  GL_PROGRAM_BINARY_LENGTH := 0x8741
  GL_NUM_PROGRAM_BINARY_FORMATS := 0x87FE
  GL_PROGRAM_BINARY_FORMATS := 0x87FF
  
  GL_VERTEX_SHADER_BIT := 0x00000001
  GL_FRAGMENT_SHADER_BIT := 0x00000002
  GL_GEOMETRY_SHADER_BIT := 0x00000004
  GL_TESS_CONTROL_SHADER_BIT := 0x00000008
  GL_TESS_EVALUATION_SHADER_BIT := 0x00000010
  GL_ALL_SHADER_BITS := 0xFFFFFFFF
  GL_PROGRAM_SEPARABLE := 0x8258
  GL_ACTIVE_PROGRAM := 0x8259
  GL_PROGRAM_PIPELINE_BINDING := 0x825A
  
  GL_MAX_VIEWPORTS := 0x825B
  GL_VIEWPORT_SUBPIXEL_BITS := 0x825C
  GL_VIEWPORT_BOUNDS_RANGE := 0x825D
  GL_LAYER_PROVOKING_VERTEX := 0x825E
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX := 0x825F
  GL_UNDEFINED_VERTEX := 0x8260
  
  GL_SYNC_CL_EVENT_ARB := 0x8240
  GL_SYNC_CL_EVENT_COMPLETE_ARB := 0x8241
  
  GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB := 0x8242
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB := 0x8243
  GL_DEBUG_CALLBACK_FUNCTION_ARB := 0x8244
  GL_DEBUG_CALLBACK_USER_PARAM_ARB := 0x8245
  GL_DEBUG_SOURCE_API_ARB := 0x8246
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB := 0x8247
  GL_DEBUG_SOURCE_SHADER_COMPILER_ARB := 0x8248
  GL_DEBUG_SOURCE_THIRD_PARTY_ARB := 0x8249
  GL_DEBUG_SOURCE_APPLICATION_ARB := 0x824A
  GL_DEBUG_SOURCE_OTHER_ARB := 0x824B
  GL_DEBUG_TYPE_ERROR_ARB := 0x824C
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB := 0x824D
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB := 0x824E
  GL_DEBUG_TYPE_PORTABILITY_ARB := 0x824F
  GL_DEBUG_TYPE_PERFORMANCE_ARB := 0x8250
  GL_DEBUG_TYPE_OTHER_ARB := 0x8251
  GL_MAX_DEBUG_MESSAGE_LENGTH_ARB := 0x9143
  GL_MAX_DEBUG_LOGGED_MESSAGES_ARB := 0x9144
  GL_DEBUG_LOGGED_MESSAGES_ARB := 0x9145
  GL_DEBUG_SEVERITY_HIGH_ARB := 0x9146
  GL_DEBUG_SEVERITY_MEDIUM_ARB := 0x9147
  GL_DEBUG_SEVERITY_LOW_ARB := 0x9148
  
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB := 0x00000004
  GL_LOSE_CONTEXT_ON_RESET_ARB := 0x8252
  GL_GUILTY_CONTEXT_RESET_ARB := 0x8253
  GL_INNOCENT_CONTEXT_RESET_ARB := 0x8254
  GL_UNKNOWN_CONTEXT_RESET_ARB := 0x8255
  GL_RESET_NOTIFICATION_STRATEGY_ARB := 0x8256
  GL_NO_RESET_NOTIFICATION_ARB := 0x8261
}
if (GL_VERSION >= 1.2)
{
  GL_UNSIGNED_BYTE_3_3_2 := 0x8032
  GL_UNSIGNED_SHORT_4_4_4_4 := 0x8033
  GL_UNSIGNED_SHORT_5_5_5_1 := 0x8034
  GL_UNSIGNED_INT_8_8_8_8 := 0x8035
  GL_UNSIGNED_INT_10_10_10_2 := 0x8036
  GL_TEXTURE_BINDING_3D := 0x806A
  GL_PACK_SKIP_IMAGES := 0x806B
  GL_PACK_IMAGE_HEIGHT := 0x806C
  GL_UNPACK_SKIP_IMAGES := 0x806D
  GL_UNPACK_IMAGE_HEIGHT := 0x806E
  GL_TEXTURE_3D := 0x806F
  GL_PROXY_TEXTURE_3D := 0x8070
  GL_TEXTURE_DEPTH := 0x8071
  GL_TEXTURE_WRAP_R := 0x8072
  GL_MAX_3D_TEXTURE_SIZE := 0x8073
  GL_UNSIGNED_BYTE_2_3_3_REV := 0x8362
  GL_UNSIGNED_SHORT_5_6_5 := 0x8363
  GL_UNSIGNED_SHORT_5_6_5_REV := 0x8364
  GL_UNSIGNED_SHORT_4_4_4_4_REV := 0x8365
  GL_UNSIGNED_SHORT_1_5_5_5_REV := 0x8366
  GL_UNSIGNED_INT_8_8_8_8_REV := 0x8367
  GL_UNSIGNED_INT_2_10_10_10_REV := 0x8368
  GL_BGR := 0x80E0
  GL_BGRA := 0x80E1
  GL_MAX_ELEMENTS_VERTICES := 0x80E8
  GL_MAX_ELEMENTS_INDICES := 0x80E9
  GL_CLAMP_TO_EDGE := 0x812F
  GL_TEXTURE_MIN_LOD := 0x813A
  GL_TEXTURE_MAX_LOD := 0x813B
  GL_TEXTURE_BASE_LEVEL := 0x813C
  GL_TEXTURE_MAX_LEVEL := 0x813D
  GL_SMOOTH_POINT_SIZE_RANGE := 0x0B12
  GL_SMOOTH_POINT_SIZE_GRANULARITY := 0x0B13
  GL_SMOOTH_LINE_WIDTH_RANGE := 0x0B22
  GL_SMOOTH_LINE_WIDTH_GRANULARITY := 0x0B23
  GL_ALIASED_LINE_WIDTH_RANGE := 0x846E
  
  GL_CONSTANT_COLOR := 0x8001
  GL_ONE_MINUS_CONSTANT_COLOR := 0x8002
  GL_CONSTANT_ALPHA := 0x8003
  GL_ONE_MINUS_CONSTANT_ALPHA := 0x8004
  GL_BLEND_COLOR := 0x8005
  GL_FUNC_ADD := 0x8006
  GL_MIN := 0x8007
  GL_MAX := 0x8008
  GL_BLEND_EQUATION := 0x8009
  GL_FUNC_SUBTRACT := 0x800A
  GL_FUNC_REVERSE_SUBTRACT := 0x800B
}
if (GL_VERSION >= 1.3)
{
  GL_TEXTURE0 := 0x84C0
  GL_TEXTURE1 := 0x84C1
  GL_TEXTURE2 := 0x84C2
  GL_TEXTURE3 := 0x84C3
  GL_TEXTURE4 := 0x84C4
  GL_TEXTURE5 := 0x84C5
  GL_TEXTURE6 := 0x84C6
  GL_TEXTURE7 := 0x84C7
  GL_TEXTURE8 := 0x84C8
  GL_TEXTURE9 := 0x84C9
  GL_TEXTURE10 := 0x84CA
  GL_TEXTURE11 := 0x84CB
  GL_TEXTURE12 := 0x84CC
  GL_TEXTURE13 := 0x84CD
  GL_TEXTURE14 := 0x84CE
  GL_TEXTURE15 := 0x84CF
  GL_TEXTURE16 := 0x84D0
  GL_TEXTURE17 := 0x84D1
  GL_TEXTURE18 := 0x84D2
  GL_TEXTURE19 := 0x84D3
  GL_TEXTURE20 := 0x84D4
  GL_TEXTURE21 := 0x84D5
  GL_TEXTURE22 := 0x84D6
  GL_TEXTURE23 := 0x84D7
  GL_TEXTURE24 := 0x84D8
  GL_TEXTURE25 := 0x84D9
  GL_TEXTURE26 := 0x84DA
  GL_TEXTURE27 := 0x84DB
  GL_TEXTURE28 := 0x84DC
  GL_TEXTURE29 := 0x84DD
  GL_TEXTURE30 := 0x84DE
  GL_TEXTURE31 := 0x84DF
  GL_ACTIVE_TEXTURE := 0x84E0
  GL_MULTISAMPLE := 0x809D
  GL_SAMPLE_ALPHA_TO_COVERAGE := 0x809E
  GL_SAMPLE_ALPHA_TO_ONE := 0x809F
  GL_SAMPLE_COVERAGE := 0x80A0
  GL_SAMPLE_BUFFERS := 0x80A8
  GL_SAMPLES := 0x80A9
  GL_SAMPLE_COVERAGE_VALUE := 0x80AA
  GL_SAMPLE_COVERAGE_INVERT := 0x80AB
  GL_TEXTURE_CUBE_MAP := 0x8513
  GL_TEXTURE_BINDING_CUBE_MAP := 0x8514
  GL_TEXTURE_CUBE_MAP_POSITIVE_X := 0x8515
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X := 0x8516
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y := 0x8517
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y := 0x8518
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z := 0x8519
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z := 0x851A
  GL_PROXY_TEXTURE_CUBE_MAP := 0x851B
  GL_MAX_CUBE_MAP_TEXTURE_SIZE := 0x851C
  GL_COMPRESSED_RGB := 0x84ED
  GL_COMPRESSED_RGBA := 0x84EE
  GL_TEXTURE_COMPRESSION_HINT := 0x84EF
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE := 0x86A0
  GL_TEXTURE_COMPRESSED := 0x86A1
  GL_NUM_COMPRESSED_TEXTURE_FORMATS := 0x86A2
  GL_COMPRESSED_TEXTURE_FORMATS := 0x86A3
  GL_CLAMP_TO_BORDER := 0x812D
}
if (GL_VERSION >= 1.4)
{
  GL_BLEND_DST_RGB := 0x80C8
  GL_BLEND_SRC_RGB := 0x80C9
  GL_BLEND_DST_ALPHA := 0x80CA
  GL_BLEND_SRC_ALPHA := 0x80CB
  GL_POINT_FADE_THRESHOLD_SIZE := 0x8128
  GL_DEPTH_COMPONENT16 := 0x81A5
  GL_DEPTH_COMPONENT24 := 0x81A6
  GL_DEPTH_COMPONENT32 := 0x81A7
  GL_MIRRORED_REPEAT := 0x8370
  GL_MAX_TEXTURE_LOD_BIAS := 0x84FD
  GL_TEXTURE_LOD_BIAS := 0x8501
  GL_INCR_WRAP := 0x8507
  GL_DECR_WRAP := 0x8508
  GL_TEXTURE_DEPTH_SIZE := 0x884A
  GL_TEXTURE_COMPARE_MODE := 0x884C
  GL_TEXTURE_COMPARE_FUNC := 0x884D
}
if (GL_VERSION >= 1.5)
{
  GL_BUFFER_SIZE := 0x8764
  GL_BUFFER_USAGE := 0x8765
  GL_QUERY_COUNTER_BITS := 0x8864
  GL_CURRENT_QUERY := 0x8865
  GL_QUERY_RESULT := 0x8866
  GL_QUERY_RESULT_AVAILABLE := 0x8867
  GL_ARRAY_BUFFER := 0x8892
  GL_ELEMENT_ARRAY_BUFFER := 0x8893
  GL_ARRAY_BUFFER_BINDING := 0x8894
  GL_ELEMENT_ARRAY_BUFFER_BINDING := 0x8895
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING := 0x889F
  GL_READ_ONLY := 0x88B8
  GL_WRITE_ONLY := 0x88B9
  GL_READ_WRITE := 0x88BA
  GL_BUFFER_ACCESS := 0x88BB
  GL_BUFFER_MAPPED := 0x88BC
  GL_BUFFER_MAP_POINTER := 0x88BD
  GL_STREAM_DRAW := 0x88E0
  GL_STREAM_READ := 0x88E1
  GL_STREAM_COPY := 0x88E2
  GL_STATIC_DRAW := 0x88E4
  GL_STATIC_READ := 0x88E5
  GL_STATIC_COPY := 0x88E6
  GL_DYNAMIC_DRAW := 0x88E8
  GL_DYNAMIC_READ := 0x88E9
  GL_DYNAMIC_COPY := 0x88EA
  GL_SAMPLES_PASSED := 0x8914
}
if (GL_VERSION >= 2.0)
{
  GL_BLEND_EQUATION_RGB := 0x8009
  GL_VERTEX_ATTRIB_ARRAY_ENABLED := 0x8622
  GL_VERTEX_ATTRIB_ARRAY_SIZE := 0x8623
  GL_VERTEX_ATTRIB_ARRAY_STRIDE := 0x8624
  GL_VERTEX_ATTRIB_ARRAY_TYPE := 0x8625
  GL_CURRENT_VERTEX_ATTRIB := 0x8626
  GL_VERTEX_PROGRAM_POINT_SIZE := 0x8642
  GL_VERTEX_ATTRIB_ARRAY_POINTER := 0x8645
  GL_STENCIL_BACK_FUNC := 0x8800
  GL_STENCIL_BACK_FAIL := 0x8801
  GL_STENCIL_BACK_PASS_DEPTH_FAIL := 0x8802
  GL_STENCIL_BACK_PASS_DEPTH_PASS := 0x8803
  GL_MAX_DRAW_BUFFERS := 0x8824
  GL_DRAW_BUFFER0 := 0x8825
  GL_DRAW_BUFFER1 := 0x8826
  GL_DRAW_BUFFER2 := 0x8827
  GL_DRAW_BUFFER3 := 0x8828
  GL_DRAW_BUFFER4 := 0x8829
  GL_DRAW_BUFFER5 := 0x882A
  GL_DRAW_BUFFER6 := 0x882B
  GL_DRAW_BUFFER7 := 0x882C
  GL_DRAW_BUFFER8 := 0x882D
  GL_DRAW_BUFFER9 := 0x882E
  GL_DRAW_BUFFER10 := 0x882F
  GL_DRAW_BUFFER11 := 0x8830
  GL_DRAW_BUFFER12 := 0x8831
  GL_DRAW_BUFFER13 := 0x8832
  GL_DRAW_BUFFER14 := 0x8833
  GL_DRAW_BUFFER15 := 0x8834
  GL_BLEND_EQUATION_ALPHA := 0x883D
  GL_MAX_VERTEX_ATTRIBS := 0x8869
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED := 0x886A
  GL_MAX_TEXTURE_IMAGE_UNITS := 0x8872
  GL_FRAGMENT_SHADER := 0x8B30
  GL_VERTEX_SHADER := 0x8B31
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS := 0x8B49
  GL_MAX_VERTEX_UNIFORM_COMPONENTS := 0x8B4A
  GL_MAX_VARYING_FLOATS := 0x8B4B
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS := 0x8B4C
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS := 0x8B4D
  GL_SHADER_TYPE := 0x8B4F
  GL_FLOAT_VEC2 := 0x8B50
  GL_FLOAT_VEC3 := 0x8B51
  GL_FLOAT_VEC4 := 0x8B52
  GL_INT_VEC2 := 0x8B53
  GL_INT_VEC3 := 0x8B54
  GL_INT_VEC4 := 0x8B55
  GL_BOOL := 0x8B56
  GL_BOOL_VEC2 := 0x8B57
  GL_BOOL_VEC3 := 0x8B58
  GL_BOOL_VEC4 := 0x8B59
  GL_FLOAT_MAT2 := 0x8B5A
  GL_FLOAT_MAT3 := 0x8B5B
  GL_FLOAT_MAT4 := 0x8B5C
  GL_SAMPLER_1D := 0x8B5D
  GL_SAMPLER_2D := 0x8B5E
  GL_SAMPLER_3D := 0x8B5F
  GL_SAMPLER_CUBE := 0x8B60
  GL_SAMPLER_1D_SHADOW := 0x8B61
  GL_SAMPLER_2D_SHADOW := 0x8B62
  GL_DELETE_STATUS := 0x8B80
  GL_COMPILE_STATUS := 0x8B81
  GL_LINK_STATUS := 0x8B82
  GL_VALIDATE_STATUS := 0x8B83
  GL_INFO_LOG_LENGTH := 0x8B84
  GL_ATTACHED_SHADERS := 0x8B85
  GL_ACTIVE_UNIFORMS := 0x8B86
  GL_ACTIVE_UNIFORM_MAX_LENGTH := 0x8B87
  GL_SHADER_SOURCE_LENGTH := 0x8B88
  GL_ACTIVE_ATTRIBUTES := 0x8B89
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH := 0x8B8A
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT := 0x8B8B
  GL_SHADING_LANGUAGE_VERSION := 0x8B8C
  GL_CURRENT_PROGRAM := 0x8B8D
  GL_POINT_SPRITE_COORD_ORIGIN := 0x8CA0
  GL_LOWER_LEFT := 0x8CA1
  GL_UPPER_LEFT := 0x8CA2
  GL_STENCIL_BACK_REF := 0x8CA3
  GL_STENCIL_BACK_VALUE_MASK := 0x8CA4
  GL_STENCIL_BACK_WRITEMASK := 0x8CA5
}
if (GL_VERSION >= 2.1)
{
  GL_PIXEL_PACK_BUFFER := 0x88EB
  GL_PIXEL_UNPACK_BUFFER := 0x88EC
  GL_PIXEL_PACK_BUFFER_BINDING := 0x88ED
  GL_PIXEL_UNPACK_BUFFER_BINDING := 0x88EF
  GL_FLOAT_MAT2x3 := 0x8B65
  GL_FLOAT_MAT2x4 := 0x8B66
  GL_FLOAT_MAT3x2 := 0x8B67
  GL_FLOAT_MAT3x4 := 0x8B68
  GL_FLOAT_MAT4x2 := 0x8B69
  GL_FLOAT_MAT4x3 := 0x8B6A
  GL_SRGB := 0x8C40
  GL_SRGB8 := 0x8C41
  GL_SRGB_ALPHA := 0x8C42
  GL_SRGB8_ALPHA8 := 0x8C43
  GL_COMPRESSED_SRGB := 0x8C48
  GL_COMPRESSED_SRGB_ALPHA := 0x8C49
}
if (GL_VERSION >= 3.0)
{
  GL_COMPARE_REF_TO_TEXTURE := 0x884E
  GL_CLIP_DISTANCE0 := 0x3000
  GL_CLIP_DISTANCE1 := 0x3001
  GL_CLIP_DISTANCE2 := 0x3002
  GL_CLIP_DISTANCE3 := 0x3003
  GL_CLIP_DISTANCE4 := 0x3004
  GL_CLIP_DISTANCE5 := 0x3005
  GL_CLIP_DISTANCE6 := 0x3006
  GL_CLIP_DISTANCE7 := 0x3007
  GL_MAX_CLIP_DISTANCES := 0x0D32
  GL_MAJOR_VERSION := 0x821B
  GL_MINOR_VERSION := 0x821C
  GL_NUM_EXTENSIONS := 0x821D
  GL_CONTEXT_FLAGS := 0x821E
  GL_DEPTH_BUFFER := 0x8223
  GL_STENCIL_BUFFER := 0x8224
  GL_COMPRESSED_RED := 0x8225
  GL_COMPRESSED_RG := 0x8226
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT := 0x0001
  GL_RGBA32F := 0x8814
  GL_RGB32F := 0x8815
  GL_RGBA16F := 0x881A
  GL_RGB16F := 0x881B
  GL_VERTEX_ATTRIB_ARRAY_INTEGER := 0x88FD
  GL_MAX_ARRAY_TEXTURE_LAYERS := 0x88FF
  GL_MIN_PROGRAM_TEXEL_OFFSET := 0x8904
  GL_MAX_PROGRAM_TEXEL_OFFSET := 0x8905
  GL_CLAMP_READ_COLOR := 0x891C
  GL_FIXED_ONLY := 0x891D
  GL_MAX_VARYING_COMPONENTS := 0x8B4B
  GL_TEXTURE_1D_ARRAY := 0x8C18
  GL_PROXY_TEXTURE_1D_ARRAY := 0x8C19
  GL_TEXTURE_2D_ARRAY := 0x8C1A
  GL_PROXY_TEXTURE_2D_ARRAY := 0x8C1B
  GL_TEXTURE_BINDING_1D_ARRAY := 0x8C1C
  GL_TEXTURE_BINDING_2D_ARRAY := 0x8C1D
  GL_R11F_G11F_B10F := 0x8C3A
  GL_UNSIGNED_INT_10F_11F_11F_REV := 0x8C3B
  GL_RGB9_E5 := 0x8C3D
  GL_UNSIGNED_INT_5_9_9_9_REV := 0x8C3E
  GL_TEXTURE_SHARED_SIZE := 0x8C3F
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH := 0x8C76
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE := 0x8C7F
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS := 0x8C80
  GL_TRANSFORM_FEEDBACK_VARYINGS := 0x8C83
  GL_TRANSFORM_FEEDBACK_BUFFER_START := 0x8C84
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE := 0x8C85
  GL_PRIMITIVES_GENERATED := 0x8C87
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN := 0x8C88
  GL_RASTERIZER_DISCARD := 0x8C89
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS := 0x8C8A
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS := 0x8C8B
  GL_INTERLEAVED_ATTRIBS := 0x8C8C
  GL_SEPARATE_ATTRIBS := 0x8C8D
  GL_TRANSFORM_FEEDBACK_BUFFER := 0x8C8E
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING := 0x8C8F
  GL_RGBA32UI := 0x8D70
  GL_RGB32UI := 0x8D71
  GL_RGBA16UI := 0x8D76
  GL_RGB16UI := 0x8D77
  GL_RGBA8UI := 0x8D7C
  GL_RGB8UI := 0x8D7D
  GL_RGBA32I := 0x8D82
  GL_RGB32I := 0x8D83
  GL_RGBA16I := 0x8D88
  GL_RGB16I := 0x8D89
  GL_RGBA8I := 0x8D8E
  GL_RGB8I := 0x8D8F
  GL_RED_INTEGER := 0x8D94
  GL_GREEN_INTEGER := 0x8D95
  GL_BLUE_INTEGER := 0x8D96
  GL_RGB_INTEGER := 0x8D98
  GL_RGBA_INTEGER := 0x8D99
  GL_BGR_INTEGER := 0x8D9A
  GL_BGRA_INTEGER := 0x8D9B
  GL_SAMPLER_1D_ARRAY := 0x8DC0
  GL_SAMPLER_2D_ARRAY := 0x8DC1
  GL_SAMPLER_1D_ARRAY_SHADOW := 0x8DC3
  GL_SAMPLER_2D_ARRAY_SHADOW := 0x8DC4
  GL_SAMPLER_CUBE_SHADOW := 0x8DC5
  GL_UNSIGNED_INT_VEC2 := 0x8DC6
  GL_UNSIGNED_INT_VEC3 := 0x8DC7
  GL_UNSIGNED_INT_VEC4 := 0x8DC8
  GL_INT_SAMPLER_1D := 0x8DC9
  GL_INT_SAMPLER_2D := 0x8DCA
  GL_INT_SAMPLER_3D := 0x8DCB
  GL_INT_SAMPLER_CUBE := 0x8DCC
  GL_INT_SAMPLER_1D_ARRAY := 0x8DCE
  GL_INT_SAMPLER_2D_ARRAY := 0x8DCF
  GL_UNSIGNED_INT_SAMPLER_1D := 0x8DD1
  GL_UNSIGNED_INT_SAMPLER_2D := 0x8DD2
  GL_UNSIGNED_INT_SAMPLER_3D := 0x8DD3
  GL_UNSIGNED_INT_SAMPLER_CUBE := 0x8DD4
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY := 0x8DD6
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY := 0x8DD7
  GL_QUERY_WAIT := 0x8E13
  GL_QUERY_NO_WAIT := 0x8E14
  GL_QUERY_BY_REGION_WAIT := 0x8E15
  GL_QUERY_BY_REGION_NO_WAIT := 0x8E16
  GL_BUFFER_ACCESS_FLAGS := 0x911F
  GL_BUFFER_MAP_LENGTH := 0x9120
  GL_BUFFER_MAP_OFFSET := 0x9121
}
if (GL_VERSION >= 3.1)
{
  GL_SAMPLER_2D_RECT := 0x8B63
  GL_SAMPLER_2D_RECT_SHADOW := 0x8B64
  GL_SAMPLER_BUFFER := 0x8DC2
  GL_INT_SAMPLER_2D_RECT := 0x8DCD
  GL_INT_SAMPLER_BUFFER := 0x8DD0
  GL_UNSIGNED_INT_SAMPLER_2D_RECT := 0x8DD5
  GL_UNSIGNED_INT_SAMPLER_BUFFER := 0x8DD8
  GL_TEXTURE_BUFFER := 0x8C2A
  GL_MAX_TEXTURE_BUFFER_SIZE := 0x8C2B
  GL_TEXTURE_BINDING_BUFFER := 0x8C2C
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING := 0x8C2D
  GL_TEXTURE_BUFFER_FORMAT := 0x8C2E
  GL_TEXTURE_RECTANGLE := 0x84F5
  GL_TEXTURE_BINDING_RECTANGLE := 0x84F6
  GL_PROXY_TEXTURE_RECTANGLE := 0x84F7
  GL_MAX_RECTANGLE_TEXTURE_SIZE := 0x84F8
  GL_RED_SNORM := 0x8F90
  GL_RG_SNORM := 0x8F91
  GL_RGB_SNORM := 0x8F92
  GL_RGBA_SNORM := 0x8F93
  GL_R8_SNORM := 0x8F94
  GL_RG8_SNORM := 0x8F95
  GL_RGB8_SNORM := 0x8F96
  GL_RGBA8_SNORM := 0x8F97
  GL_R16_SNORM := 0x8F98
  GL_RG16_SNORM := 0x8F99
  GL_RGB16_SNORM := 0x8F9A
  GL_RGBA16_SNORM := 0x8F9B
  GL_SIGNED_NORMALIZED := 0x8F9C
  GL_PRIMITIVE_RESTART := 0x8F9D
  GL_PRIMITIVE_RESTART_INDEX := 0x8F9E
}
if (GL_VERSION >= 3.2)
{
  GL_CONTEXT_CORE_PROFILE_BIT := 0x00000001
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT := 0x00000002
  GL_LINES_ADJACENCY := 0x000A
  GL_LINE_STRIP_ADJACENCY := 0x000B
  GL_TRIANGLES_ADJACENCY := 0x000C
  GL_TRIANGLE_STRIP_ADJACENCY := 0x000D
  GL_PROGRAM_POINT_SIZE := 0x8642
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS := 0x8C29
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED := 0x8DA7
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS := 0x8DA8
  GL_GEOMETRY_SHADER := 0x8DD9
  GL_GEOMETRY_VERTICES_OUT := 0x8916
  GL_GEOMETRY_INPUT_TYPE := 0x8917
  GL_GEOMETRY_OUTPUT_TYPE := 0x8918
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS := 0x8DDF
  GL_MAX_GEOMETRY_OUTPUT_VERTICES := 0x8DE0
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS := 0x8DE1
  GL_MAX_VERTEX_OUTPUT_COMPONENTS := 0x9122
  GL_MAX_GEOMETRY_INPUT_COMPONENTS := 0x9123
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS := 0x9124
  GL_MAX_FRAGMENT_INPUT_COMPONENTS := 0x9125
  GL_CONTEXT_PROFILE_MASK := 0x9126
}
if (GL_VERSION >= 3.3)
{
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR := 0x88FE
}
if (GL_VERSION >= 4.0)
{
  GL_SAMPLE_SHADING := 0x8C36
  GL_MIN_SAMPLE_SHADING_VALUE := 0x8C37
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET := 0x8E5E
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET := 0x8E5F
  GL_TEXTURE_CUBE_MAP_ARRAY := 0x9009
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY := 0x900A
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY := 0x900B
  GL_SAMPLER_CUBE_MAP_ARRAY := 0x900C
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW := 0x900D
  GL_INT_SAMPLER_CUBE_MAP_ARRAY := 0x900E
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY := 0x900F
}


;;;;;;;;;;;;;;;;;;;;;;
;; OpenGL Functions ;;
;;;;;;;;;;;;;;;;;;;;;;

glClearIndex(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", c)
}

glClearColor(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", red, "float", green, "float", blue, "float", alpha)
}

glClear(mask)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mask)
}

glIndexMask(mask)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mask)
}

glColorMask(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uchar", red, "uchar", green, "uchar", blue, "uchar", alpha)
}

glAlphaFunc(func, ref)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", func, "float", ref)
}

glBlendFunc(sfactor, dfactor)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", sfactor, "uint", dfactor)
}

glLogicOp(opcode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", opcode)
}

glCullFace(mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode)
}

glFrontFace(mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode)
}

glPointSize(size)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", size)
}

glLineWidth(width)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", width)
}

glLineStipple(factor, pattern)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", factor, "ushort", pattern)
}

glPolygonMode(face, mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", face, "uint", mode)
}

glPolygonOffset(factor, units)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", factor, "float", units)
}

glPolygonStipple(mask)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mask)
}

glGetPolygonStipple(mask)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mask)
}

glEdgeFlag(flag)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uchar", flag)
}

glEdgeFlagv(flag)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", flag)
}

glScissor(x, y, width, height)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y, "int", width, "int", height)
}

glClipPlane(plane, equation)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", plane, "uint", equation)
}

glGetClipPlane(plane, equation)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", plane, "uint", equation)
}

glDrawBuffer(mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode)
}

glReadBuffer(mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode)
}

glEnable(cap)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", cap)
}

glDisable(cap)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", cap)
}

glIsEnabled(cap)
{
  static proc
  return DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", cap, "uchar")
}

glEnableClientState(cap)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", cap)
}

glDisableClientState(cap)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", cap)
}

glGetBooleanv(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glGetDoublev(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glGetFloatv(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glGetIntegerv(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glPushAttrib(mask)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mask)
}

glPopAttrib()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glPushClientAttrib(mask)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mask)
}

glPopClientAttrib()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glRenderMode(mode)
{
  static proc
  return DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode, "int")
}

glGetError()
{
  static proc
  return DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint")
}

glGetString(name)
{
  static proc
  return DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", name, "uint")
}

glFinish()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glFlush()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glHint(target, mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", mode)
}

glClearDepth(depth)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", depth)
}

glDepthFunc(func)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", func)
}

glDepthMask(flag)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uchar", flag)
}

glDepthRange(near_val, far_val)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", near_val, "double", far_val)
}

glClearAccum(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", red, "float", green, "float", blue, "float", alpha)
}

glAccum(op, value)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", op, "float", value)
}

glMatrixMode(mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode)
}

glOrtho(left, right, bottom, top, near_val, far_val)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", left, "double", right, "double", bottom, "double", top, "double", near_val, "double", far_val)
}

glFrustum(left, right, bottom, top, near_val, far_val)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", left, "double", right, "double", bottom, "double", top, "double", near_val, "double", far_val)
}

glViewport(x, y, width, height)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y, "int", width, "int", height)
}

glPushMatrix()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glPopMatrix()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glLoadIdentity()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glLoadMatrixd(m)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", m)
}

glLoadMatrixf(m)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", m)
}

glMultMatrixd(m)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", m)
}

glMultMatrixf(m)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", m)
}

glRotated(angle, x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", angle, "double", x, "double", y, "double", z)
}

glRotatef(angle, x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", angle, "float", x, "float", y, "float", z)
}

glScaled(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x, "double", y, "double", z)
}

glScalef(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x, "float", y, "float", z)
}

glTranslated(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x, "double", y, "double", z)
}

glTranslatef(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x, "float", y, "float", z)
}

glIsList(list)
{
  static proc
  return DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", list, "uchar")
}

glDeleteLists(list, range)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", list, "int", range)
}

glGenLists(range)
{
  static proc
  return DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", range, "uint")
}

glNewList(list, mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", list, "uint", mode)
}

glEndList()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glCallList(list)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", list)
}

glCallLists(n, type, lists)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", n, "uint", type, "uint", lists)
}

glListBase(base)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", base)
}

glBegin(mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode)
}

glEnd()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glVertex2d(x, y)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x, "double", y)
}

glVertex2f(x, y)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x, "float", y)
}

glVertex2i(x, y)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y)
}

glVertex2s(x, y)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", x, "short", y)
}

glVertex3d(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x, "double", y, "double", z)
}

glVertex3f(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x, "float", y, "float", z)
}

glVertex3i(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y, "int", z)
}

glVertex3s(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", x, "short", y, "short", z)
}

glVertex4d(x, y, z, w)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x, "double", y, "double", z, "double", w)
}

glVertex4f(x, y, z, w)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x, "float", y, "float", z, "float", w)
}

glVertex4i(x, y, z, w)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y, "int", z, "int", w)
}

glVertex4s(x, y, z, w)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", x, "short", y, "short", z, "short", w)
}

glVertex2dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex2fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex2iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex2sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex3dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex3fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex3iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex3sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex4dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex4fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex4iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glVertex4sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glNormal3b(nx, ny, nz)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "char", nx, "char", ny, "char", nz)
}

glNormal3d(nx, ny, nz)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", nx, "double", ny, "double", nz)
}

glNormal3f(nx, ny, nz)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", nx, "float", ny, "float", nz)
}

glNormal3i(nx, ny, nz)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", nx, "int", ny, "int", nz)
}

glNormal3s(nx, ny, nz)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", nx, "short", ny, "short", nz)
}

glNormal3bv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glNormal3dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glNormal3fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glNormal3iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glNormal3sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glIndexd(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", c)
}

glIndexf(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", c)
}

glIndexi(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", c)
}

glIndexs(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", c)
}

glIndexub(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uchar", c)
}

glIndexdv(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", c)
}

glIndexfv(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", c)
}

glIndexiv(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", c)
}

glIndexsv(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", c)
}

glIndexubv(c)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", c)
}

glColor3b(red, green, blue)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "char", red, "char", green, "char", blue)
}

glColor3d(red, green, blue)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", red, "double", green, "double", blue)
}

glColor3f(red, green, blue)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", red, "float", green, "float", blue)
}

glColor3i(red, green, blue)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", red, "int", green, "int", blue)
}

glColor3s(red, green, blue)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", red, "short", green, "short", blue)
}

glColor3ub(red, green, blue)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uchar", red, "uchar", green, "uchar", blue)
}

glColor3ui(red, green, blue)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", red, "uint", green, "uint", blue)
}

glColor3us(red, green, blue)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "ushort", red, "ushort", green, "ushort", blue)
}

glColor4b(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "char", red, "char", green, "char", blue, "char", alpha)
}

glColor4d(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", red, "double", green, "double", blue, "double", alpha)
}

glColor4f(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", red, "float", green, "float", blue, "float", alpha)
}

glColor4i(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", red, "int", green, "int", blue, "int", alpha)
}

glColor4s(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", red, "short", green, "short", blue, "short", alpha)
}

glColor4ub(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uchar", red, "uchar", green, "uchar", blue, "uchar", alpha)
}

glColor4ui(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", red, "uint", green, "uint", blue, "uint", alpha)
}

glColor4us(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "ushort", red, "ushort", green, "ushort", blue, "ushort", alpha)
}

glColor3bv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor3dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor3fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor3iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor3sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor3ubv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor3uiv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor3usv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor4bv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor4dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor4fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor4iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor4sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor4ubv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor4uiv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glColor4usv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord1d(s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", s)
}

glTexCoord1f(s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", s)
}

glTexCoord1i(s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", s)
}

glTexCoord1s(s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", s)
}

glTexCoord2d(s, t)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", s, "double", t)
}

glTexCoord2f(s, t)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", s, "float", t)
}

glTexCoord2i(s, t)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", s, "int", t)
}

glTexCoord2s(s, t)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", s, "short", t)
}

glTexCoord3d(s, t, r)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", s, "double", t, "double", r)
}

glTexCoord3f(s, t, r)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", s, "float", t, "float", r)
}

glTexCoord3i(s, t, r)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", s, "int", t, "int", r)
}

glTexCoord3s(s, t, r)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", s, "short", t, "short", r)
}

glTexCoord4d(s, t, r, q)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", s, "double", t, "double", r, "double", q)
}

glTexCoord4f(s, t, r, q)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", s, "float", t, "float", r, "float", q)
}

glTexCoord4i(s, t, r, q)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", s, "int", t, "int", r, "int", q)
}

glTexCoord4s(s, t, r, q)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", s, "short", t, "short", r, "short", q)
}

glTexCoord1dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord1fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord1iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord1sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord2dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord2fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord2iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord2sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord3dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord3fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord3iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord3sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord4dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord4fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord4iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glTexCoord4sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos2d(x, y)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x, "double", y)
}

glRasterPos2f(x, y)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x, "float", y)
}

glRasterPos2i(x, y)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y)
}

glRasterPos2s(x, y)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", x, "short", y)
}

glRasterPos3d(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x, "double", y, "double", z)
}

glRasterPos3f(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x, "float", y, "float", z)
}

glRasterPos3i(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y, "int", z)
}

glRasterPos3s(x, y, z)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", x, "short", y, "short", z)
}

glRasterPos4d(x, y, z, w)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x, "double", y, "double", z, "double", w)
}

glRasterPos4f(x, y, z, w)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x, "float", y, "float", z, "float", w)
}

glRasterPos4i(x, y, z, w)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y, "int", z, "int", w)
}

glRasterPos4s(x, y, z, w)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", x, "short", y, "short", z, "short", w)
}

glRasterPos2dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos2fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos2iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos2sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos3dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos3fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos3iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos3sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos4dv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos4fv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos4iv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRasterPos4sv(v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v)
}

glRectd(x1, y1, x2, y2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", x1, "double", y1, "double", x2, "double", y2)
}

glRectf(x1, y1, x2, y2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", x1, "float", y1, "float", x2, "float", y2)
}

glRecti(x1, y1, x2, y2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x1, "int", y1, "int", x2, "int", y2)
}

glRects(x1, y1, x2, y2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "short", x1, "short", y1, "short", x2, "short", y2)
}

glRectdv(v1, v2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v1, "uint", v2)
}

glRectfv(v1, v2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v1, "uint", v2)
}

glRectiv(v1, v2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v1, "uint", v2)
}

glRectsv(v1, v2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", v1, "uint", v2)
}

glShadeModel(mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode)
}

glLightf(light, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", light, "uint", pname, "float", param)
}

glLighti(light, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", light, "uint", pname, "int", param)
}

glLightfv(light, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", light, "uint", pname, "uint", params)
}

glLightiv(light, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", light, "uint", pname, "uint", params)
}

glGetLightfv(light, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", light, "uint", pname, "uint", params)
}

glGetLightiv(light, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", light, "uint", pname, "uint", params)
}

glLightModelf(pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "float", param)
}

glLightModeli(pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "int", param)
}

glLightModelfv(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glLightModeliv(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glMaterialf(face, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", face, "uint", pname, "float", param)
}

glMateriali(face, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", face, "uint", pname, "int", param)
}

glMaterialfv(face, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", face, "uint", pname, "uint", params)
}

glMaterialiv(face, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", face, "uint", pname, "uint", params)
}

glGetMaterialfv(face, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", face, "uint", pname, "uint", params)
}

glGetMaterialiv(face, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", face, "uint", pname, "uint", params)
}

glColorMaterial(face, mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", face, "uint", mode)
}

glPixelZoom(xfactor, yfactor)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", xfactor, "float", yfactor)
}

glPixelStoref(pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "float", param)
}

glPixelStorei(pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "int", param)
}

glPixelTransferf(pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "float", param)
}

glPixelTransferi(pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "int", param)
}

glPixelMapfv(map, mapsize, values)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", map, "int", mapsize, "uint", values)
}

glPixelMapuiv(map, mapsize, values)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", map, "int", mapsize, "uint", values)
}

glPixelMapusv(map, mapsize, values)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", map, "int", mapsize, "uint", values)
}

glGetPixelMapfv(map, values)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", map, "uint", values)
}

glGetPixelMapuiv(map, values)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", map, "uint", values)
}

glGetPixelMapusv(map, values)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", map, "uint", values)
}

glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", width, "int", height, "float", xorig, "float", yorig, "float", xmove, "float", ymove, "uint", bitmap)
}

glReadPixels(x, y, width, height, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y, "int", width, "int", height, "uint", format, "uint", type, "uint", pixels)
}

glDrawPixels(width, height, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", width, "int", height, "uint", format, "uint", type, "uint", pixels)
}

glCopyPixels(x, y, width, height, type)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", x, "int", y, "int", width, "int", height, "uint", type)
}

glStencilFunc(func, ref, mask)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", func, "int", ref, "uint", mask)
}

glStencilMask(mask)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mask)
}

glStencilOp(fail, zfail, zpass)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", fail, "uint", zfail, "uint", zpass)
}

glClearStencil(s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", s)
}

glTexGend(coord, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "double", param)
}

glTexGenf(coord, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "float", param)
}

glTexGeni(coord, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "int", param)
}

glTexGendv(coord, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "uint", params)
}

glTexGenfv(coord, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "uint", params)
}

glTexGeniv(coord, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "uint", params)
}

glGetTexGendv(coord, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "uint", params)
}

glGetTexGenfv(coord, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "uint", params)
}

glGetTexGeniv(coord, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", coord, "uint", pname, "uint", params)
}

glTexEnvf(target, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "float", param)
}

glTexEnvi(target, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "int", param)
}

glTexEnvfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glTexEnviv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetTexEnvfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetTexEnviv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glTexParameterf(target, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "float", param)
}

glTexParameteri(target, pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "int", param)
}

glTexParameterfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glTexParameteriv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetTexParameterfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetTexParameteriv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetTexLevelParameterfv(target, level, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", pname, "uint", params)
}

glGetTexLevelParameteriv(target, level, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", pname, "uint", params)
}

glTexImage1D(target, level, internalFormat, width, border, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", internalFormat, "int", width, "int", border, "uint", format, "uint", type, "uint", pixels)
}

glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", internalFormat, "int", width, "int", height, "int", border, "uint", format, "uint", type, "uint", pixels)
}

glGetTexImage(target, level, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", format, "uint", type, "uint", pixels)
}

glMap1d(target, u1, u2, stride, order, points)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "double", u1, "double", u2, "int", stride, "int", order, "uint", points)
}

glMap1f(target, u1, u2, stride, order, points)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "float", u1, "float", u2, "int", stride, "int", order, "uint", points)
}

glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "double", u1, "double", u2, "int", ustride, "int", uorder, "double", v1, "double", v2, "int", vstride, "int", vorder, "uint", points)
}

glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "float", u1, "float", u2, "int", ustride, "int", uorder, "float", v1, "float", v2, "int", vstride, "int", vorder, "uint", points)
}

glGetMapdv(target, query, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", query, "uint", v)
}

glGetMapfv(target, query, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", query, "uint", v)
}

glGetMapiv(target, query, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", query, "uint", v)
}

glEvalCoord1d(u)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", u)
}

glEvalCoord1f(u)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", u)
}

glEvalCoord1dv(u)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", u)
}

glEvalCoord1fv(u)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", u)
}

glEvalCoord2d(u, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "double", u, "double", v)
}

glEvalCoord2f(u, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", u, "float", v)
}

glEvalCoord2dv(u)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", u)
}

glEvalCoord2fv(u)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", u)
}

glMapGrid1d(un, u1, u2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", un, "double", u1, "double", u2)
}

glMapGrid1f(un, u1, u2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", un, "float", u1, "float", u2)
}

glMapGrid2d(un, u1, u2, vn, v1, v2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", un, "double", u1, "double", u2, "int", vn, "double", v1, "double", v2)
}

glMapGrid2f(un, u1, u2, vn, v1, v2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", un, "float", u1, "float", u2, "int", vn, "float", v1, "float", v2)
}

glEvalPoint1(i)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", i)
}

glEvalPoint2(i, j)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", i, "int", j)
}

glEvalMesh1(mode, i1, i2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode, "int", i1, "int", i2)
}

glEvalMesh2(mode, i1, i2, j1, j2)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode, "int", i1, "int", i2, "int", j1, "int", j2)
}

glFogf(pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "float", param)
}

glFogi(pname, param)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "int", param)
}

glFogfv(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glFogiv(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glFeedbackBuffer(size, type, buffer)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", size, "uint", type, "uint", buffer)
}

glPassThrough(token)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", token)
}

glSelectBuffer(size, buffer)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", size, "uint", buffer)
}

glInitNames()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glLoadName(name)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", name)
}

glPushName(name)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", name)
}

glPopName()
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)))
}

glGenTextures(n, textures)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", n, "uint", textures)
}

glDeleteTextures(n, textures)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", n, "uint", textures)
}

glBindTexture(target, texture)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", texture)
}

glPrioritizeTextures(n, textures, priorities)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", n, "uint", textures, "uint", priorities)
}

glAreTexturesResident(n, textures, residences)
{
  static proc
  return DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", n, "uint", textures, "uint", residences, "uchar")
}

glIsTexture(texture)
{
  static proc
  return DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", texture, "uchar")
}

glTexSubImage1D(target, level, xoffset, width, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", width, "uint", format, "uint", type, "uint", pixels)
}

glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", yoffset, "int", width, "int", height, "uint", format, "uint", type, "uint", pixels)
}

glCopyTexImage1D(target, level, internalformat, x, y, width, border)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", internalformat, "int", x, "int", y, "int", width, "int", border)
}

glCopyTexImage2D(target, level, internalformat, x, y, width, height, border)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", internalformat, "int", x, "int", y, "int", width, "int", height, "int", border)
}

glCopyTexSubImage1D(target, level, xoffset, x, y, width)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", x, "int", y, "int", width)
}

glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", yoffset, "int", x, "int", y, "int", width, "int", height)
}

glVertexPointer(size, type, stride, ptr)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", size, "uint", type, "int", stride, "uint", ptr)
}

glNormalPointer(type, stride, ptr)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", type, "int", stride, "uint", ptr)
}

glColorPointer(size, type, stride, ptr)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", size, "uint", type, "int", stride, "uint", ptr)
}

glIndexPointer(type, stride, ptr)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", type, "int", stride, "uint", ptr)
}

glTexCoordPointer(size, type, stride, ptr)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", size, "uint", type, "int", stride, "uint", ptr)
}

glEdgeFlagPointer(stride, ptr)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", stride, "uint", ptr)
}

glGetPointerv(pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pname, "uint", params)
}

glArrayElement(i)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "int", i)
}

glDrawArrays(mode, first, count)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode, "int", first, "int", count)
}

glDrawElements(mode, count, type, indices)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode, "int", count, "uint", type, "uint", indices)
}

glInterleavedArrays(format, stride, pointer)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", format, "int", stride, "uint", pointer)
}

glDrawRangeElements(mode, start, end, count, type, indices)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode, "uint", start, "uint", end, "int", count, "uint", type, "uint", indices)
}

glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", internalFormat, "int", width, "int", height, "int", depth, "int", border, "uint", format, "uint", type, "uint", pixels)
}

glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", yoffset, "int", zoffset, "int", width, "int", height, "int", depth, "uint", format, "uint", type, "uint", pixels)
}

glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", yoffset, "int", zoffset, "int", x, "int", y, "int", width, "int", height)
}

glColorTable(target, internalformat, width, format, type, table)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", internalformat, "int", width, "uint", format, "uint", type, "uint", table)
}

glColorSubTable(target, start, count, format, type, data)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", start, "int", count, "uint", format, "uint", type, "uint", data)
}

glColorTableParameteriv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glColorTableParameterfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glCopyColorSubTable(target, start, x, y, width)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", start, "int", x, "int", y, "int", width)
}

glCopyColorTable(target, internalformat, x, y, width)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", internalformat, "int", x, "int", y, "int", width)
}

glGetColorTable(target, format, type, table)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", format, "uint", type, "uint", table)
}

glGetColorTableParameterfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetColorTableParameteriv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glBlendEquation(mode)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", mode)
}

glBlendColor(red, green, blue, alpha)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", red, "float", green, "float", blue, "float", alpha)
}

glHistogram(target, width, internalformat, sink)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", width, "uint", internalformat, "uchar", sink)
}

glResetHistogram(target)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target)
}

glGetHistogram(target, reset, format, type, values)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uchar", reset, "uint", format, "uint", type, "uint", values)
}

glGetHistogramParameterfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetHistogramParameteriv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glMinmax(target, internalformat, sink)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", internalformat, "uchar", sink)
}

glResetMinmax(target)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target)
}

glGetMinmax(target, reset, format, types, values)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uchar", reset, "uint", format, "uint", types, "uint", values)
}

glGetMinmaxParameterfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetMinmaxParameteriv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glConvolutionFilter1D(target, internalformat, width, format, type, image)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", internalformat, "int", width, "uint", format, "uint", type, "uint", image)
}

glConvolutionFilter2D(target, internalformat, width, height, format, type, image)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", internalformat, "int", width, "int", height, "uint", format, "uint", type, "uint", image)
}

glConvolutionParameterf(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "float", params)
}

glConvolutionParameterfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glConvolutionParameteri(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "int", params)
}

glConvolutionParameteriv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glCopyConvolutionFilter1D(target, internalformat, x, y, width)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", internalformat, "int", x, "int", y, "int", width)
}

glCopyConvolutionFilter2D(target, internalformat, x, y, width, height)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", internalformat, "int", x, "int", y, "int", width, "int", height)
}

glGetConvolutionFilter(target, format, type, image)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", format, "uint", type, "uint", image)
}

glGetConvolutionParameterfv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glGetConvolutionParameteriv(target, pname, params)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", pname, "uint", params)
}

glSeparableFilter2D(target, internalformat, width, height, format, type, row, column)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", internalformat, "int", width, "int", height, "uint", format, "uint", type, "uint", row, "uint", column)
}

glGetSeparableFilter(target, format, type, row, column, span)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", format, "uint", type, "uint", row, "uint", column, "uint", span)
}

glActiveTexture(texture)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", texture)
}

glClientActiveTexture(texture)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", texture)
}

glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", internalformat, "int", width, "int", border, "int", imageSize, "uint", data)
}

glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", internalformat, "int", width, "int", height, "int", border, "int", imageSize, "uint", data)
}

glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "uint", internalformat, "int", width, "int", height, "int", depth, "int", border, "int", imageSize, "uint", data)
}

glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", width, "uint", format, "int", imageSize, "uint", data)
}

glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", yoffset, "int", width, "int", height, "uint", format, "int", imageSize, "uint", data)
}

glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", level, "int", xoffset, "int", yoffset, "int", zoffset, "int", width, "int", height, "int", depth, "uint", format, "int", imageSize, "uint", data)
}

glGetCompressedTexImage(target, lod, img)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", lod, "uint", img)
}

glMultiTexCoord1d(target, s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "double", s)
}

glMultiTexCoord1dv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord1f(target, s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "float", s)
}

glMultiTexCoord1fv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord1i(target, s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", s)
}

glMultiTexCoord1iv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord1s(target, s)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "short", s)
}

glMultiTexCoord1sv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord2d(target, s, t)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "double", s, "double", t)
}

glMultiTexCoord2dv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord2f(target, s, t)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "float", s, "float", t)
}

glMultiTexCoord2fv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord2i(target, s, t)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", s, "int", t)
}

glMultiTexCoord2iv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord2s(target, s, t)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "short", s, "short", t)
}

glMultiTexCoord2sv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord3d(target, s, t, r)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "double", s, "double", t, "double", r)
}

glMultiTexCoord3dv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord3f(target, s, t, r)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "float", s, "float", t, "float", r)
}

glMultiTexCoord3fv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord3i(target, s, t, r)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", s, "int", t, "int", r)
}

glMultiTexCoord3iv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord3s(target, s, t, r)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "short", s, "short", t, "short", r)
}

glMultiTexCoord3sv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord4d(target, s, t, r, q)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "double", s, "double", t, "double", r, "double", q)
}

glMultiTexCoord4dv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord4f(target, s, t, r, q)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "float", s, "float", t, "float", r, "float", q)
}

glMultiTexCoord4fv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord4i(target, s, t, r, q)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "int", s, "int", t, "int", r, "int", q)
}

glMultiTexCoord4iv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glMultiTexCoord4s(target, s, t, r, q)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "short", s, "short", t, "short", r, "short", q)
}

glMultiTexCoord4sv(target, v)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", target, "uint", v)
}

glLoadTransposeMatrixd(m)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", m)
}

glLoadTransposeMatrixf(m)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", m)
}

glMultTransposeMatrixd(m)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", m)
}

glMultTransposeMatrixf(m)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", m)
}

glSampleCoverage(value, invert)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "float", value, "uchar", invert)
}

glSamplePass(pass)
{
  static proc
  DllCall((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc)), "uint", pass)
}

glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sfactorRGB, "uint", dfactorRGB, "uint", sfactorAlpha, "uint", dfactorAlpha)
}

glMultiDrawArrays(mode, first, count, primcount)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "uint", first, "uint", count, "int", primcount)
}

glMultiDrawElements(mode, count, type, indices, primcount)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "uint", count, "uint", type, "uint", indices, "int", primcount)
}

glPointParameterf(pname, param)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pname, "float", param)
}

glPointParameterfv(pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pname, "uint", params)
}

glPointParameteri(pname, param)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pname, "int", param)
}

glPointParameteriv(pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pname, "uint", params)
}

glGenQueries(n, ids)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", ids)
}

glDeleteQueries(n, ids)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", ids)
}

glIsQuery(id)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", id, "uchar")
}

glBeginQuery(target, id)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", id)
}

glEndQuery(target)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target)
}

glGetQueryiv(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glGetQueryObjectiv(id, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", id, "uint", pname, "uint", params)
}

glGetQueryObjectuiv(id, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", id, "uint", pname, "uint", params)
}

glBindBuffer(target, buffer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", buffer)
}

glDeleteBuffers(n, buffers)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", buffers)
}

glGenBuffers(n, buffers)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", buffers)
}

glIsBuffer(buffer)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buffer, "uchar")
}

glBufferData(target, size, data, usage)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", size, "uint", data, "uint", usage)
}

glBufferSubData(target, offset, size, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", offset, "uint", size, "uint", data)
}

glGetBufferSubData(target, offset, size, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", offset, "uint", size, "uint", data)
}

glMapBuffer(target, access)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", access, "uint")
}

glUnmapBuffer(target)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uchar")
}

glGetBufferParameteriv(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glGetBufferPointerv(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glBlendEquationSeparate(modeRGB, modeAlpha)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", modeRGB, "uint", modeAlpha)
}

glDrawBuffers(n, bufs)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", bufs)
}

glStencilOpSeparate(face, sfail, dpfail, dppass)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", face, "uint", sfail, "uint", dpfail, "uint", dppass)
}

glStencilFuncSeparate(face, func, ref, mask)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", face, "uint", func, "int", ref, "uint", mask)
}

glStencilMaskSeparate(face, mask)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", face, "uint", mask)
}

glAttachShader(program, shader)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", shader)
}

glBindAttribLocation(program, index, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", index, "uint", name)
}

glCompileShader(shader)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shader)
}

glCreateProgram()
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint")
}

glCreateShader(type)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint")
}

glDeleteProgram(program)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program)
}

glDeleteShader(shader)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shader)
}

glDetachShader(program, shader)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", shader)
}

glDisableVertexAttribArray(index)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index)
}

glEnableVertexAttribArray(index)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index)
}

glGetActiveAttrib(program, index, bufSize, length, size, type, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", index, "int", bufSize, "uint", length, "uint", size, "uint", type, "uint", name)
}

glGetActiveUniform(program, index, bufSize, length, size, type, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", index, "int", bufSize, "uint", length, "uint", size, "uint", type, "uint", name)
}

glGetAttachedShaders(program, maxCount, count, obj)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", maxCount, "uint", count, "uint", obj)
}

glGetAttribLocation(program, name)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", name, "int")
}

glGetProgramiv(program, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", pname, "uint", params)
}

glGetProgramInfoLog(program, bufSize, length, infoLog)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", bufSize, "uint", length, "uint", infoLog)
}

glGetShaderiv(shader, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shader, "uint", pname, "uint", params)
}

glGetShaderInfoLog(shader, bufSize, length, infoLog)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shader, "int", bufSize, "uint", length, "uint", infoLog)
}

glGetShaderSource(shader, bufSize, length, source)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shader, "int", bufSize, "uint", length, "uint", source)
}

glGetUniformLocation(program, name)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", name, "int")
}

glGetUniformfv(program, location, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "uint", params)
}

glGetUniformiv(program, location, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "uint", params)
}

glGetVertexAttribdv(index, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", pname, "uint", params)
}

glGetVertexAttribfv(index, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", pname, "uint", params)
}

glGetVertexAttribiv(index, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", pname, "uint", params)
}

glGetVertexAttribPointerv(index, pname, pointer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", pname, "uint", pointer)
}

glIsProgram(program)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uchar")
}

glIsShader(shader)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shader, "uchar")
}

glLinkProgram(program)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program)
}

glShaderSource(shader, count, string, length)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shader, "int", count, "uint", string, "uint", length)
}

glUseProgram(program)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program)
}

glUniform1f(location, v0)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "float", v0)
}

glUniform2f(location, v0, v1)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "float", v0, "float", v1)
}

glUniform3f(location, v0, v1, v2)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "float", v0, "float", v1, "float", v2)
}

glUniform4f(location, v0, v1, v2, v3)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "float", v0, "float", v1, "float", v2, "float", v3)
}

glUniform1i(location, v0)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", v0)
}

glUniform2i(location, v0, v1)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", v0, "int", v1)
}

glUniform3i(location, v0, v1, v2)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", v0, "int", v1, "int", v2)
}

glUniform4i(location, v0, v1, v2, v3)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", v0, "int", v1, "int", v2, "int", v3)
}

glUniform1fv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform2fv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform3fv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform4fv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform1iv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform2iv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform3iv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform4iv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniformMatrix2fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix3fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix4fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glValidateProgram(program)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program)
}

glVertexAttrib1d(index, x)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", x)
}

glVertexAttrib1dv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib1f(index, x)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "float", x)
}

glVertexAttrib1fv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib1s(index, x)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "short", x)
}

glVertexAttrib1sv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib2d(index, x, y)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", x, "double", y)
}

glVertexAttrib2dv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib2f(index, x, y)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "float", x, "float", y)
}

glVertexAttrib2fv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib2s(index, x, y)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "short", x, "short", y)
}

glVertexAttrib2sv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib3d(index, x, y, z)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", x, "double", y, "double", z)
}

glVertexAttrib3dv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib3f(index, x, y, z)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "float", x, "float", y, "float", z)
}

glVertexAttrib3fv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib3s(index, x, y, z)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "short", x, "short", y, "short", z)
}

glVertexAttrib3sv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4Nbv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4Niv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4Nsv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4Nub(index, x, y, z, w)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uchar", x, "uchar", y, "uchar", z, "uchar", w)
}

glVertexAttrib4Nubv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4Nuiv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4Nusv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4bv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4d(index, x, y, z, w)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", x, "double", y, "double", z, "double", w)
}

glVertexAttrib4dv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4f(index, x, y, z, w)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "float", x, "float", y, "float", z, "float", w)
}

glVertexAttrib4fv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4iv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4s(index, x, y, z, w)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "short", x, "short", y, "short", z, "short", w)
}

glVertexAttrib4sv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4ubv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4uiv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttrib4usv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribPointer(index, size, type, normalized, stride, pointer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "int", size, "uint", type, "uchar", normalized, "int", stride, "uint", pointer)
}

glUniformMatrix2x3fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix3x2fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix2x4fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix4x2fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix3x4fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix4x3fv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glColorMaski(index, r, g, b, a)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uchar", r, "uchar", g, "uchar", b, "uchar", a)
}

glGetBooleani_v(target, index, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", data)
}

glGetIntegeri_v(target, index, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", data)
}

glEnablei(target, index)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index)
}

glDisablei(target, index)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index)
}

glIsEnabledi(target, index)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uchar")
}

glBeginTransformFeedback(primitiveMode)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", primitiveMode)
}

glEndTransformFeedback()
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))))
}

glBindBufferRange(target, index, buffer, offset, size)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", buffer, "uint", offset, "uint", size)
}

glBindBufferBase(target, index, buffer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", buffer)
}

glTransformFeedbackVaryings(program, count, varyings, bufferMode)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", count, "uint", varyings, "uint", bufferMode)
}

glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", index, "int", bufSize, "uint", length, "uint", size, "uint", type, "uint", name)
}

glClampColor(target, clamp)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", clamp)
}

glBeginConditionalRender(id, mode)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", id, "uint", mode)
}

glEndConditionalRender()
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))))
}

glVertexAttribIPointer(index, size, type, stride, pointer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "int", size, "uint", type, "int", stride, "uint", pointer)
}

glGetVertexAttribIiv(index, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", pname, "uint", params)
}

glGetVertexAttribIuiv(index, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", pname, "uint", params)
}

glVertexAttribI1i(index, x)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "int", x)
}

glVertexAttribI2i(index, x, y)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "int", x, "int", y)
}

glVertexAttribI3i(index, x, y, z)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "int", x, "int", y, "int", z)
}

glVertexAttribI4i(index, x, y, z, w)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "int", x, "int", y, "int", z, "int", w)
}

glVertexAttribI1ui(index, x)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", x)
}

glVertexAttribI2ui(index, x, y)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", x, "uint", y)
}

glVertexAttribI3ui(index, x, y, z)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", x, "uint", y, "uint", z)
}

glVertexAttribI4ui(index, x, y, z, w)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", x, "uint", y, "uint", z, "uint", w)
}

glVertexAttribI1iv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI2iv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI3iv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI4iv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI1uiv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI2uiv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI3uiv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI4uiv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI4bv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI4sv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI4ubv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribI4usv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glGetUniformuiv(program, location, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "uint", params)
}

glBindFragDataLocation(program, color, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", color, "uint", name)
}

glGetFragDataLocation(program, name)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", name, "int")
}

glUniform1ui(location, v0)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "uint", v0)
}

glUniform2ui(location, v0, v1)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "uint", v0, "uint", v1)
}

glUniform3ui(location, v0, v1, v2)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "uint", v0, "uint", v1, "uint", v2)
}

glUniform4ui(location, v0, v1, v2, v3)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "uint", v0, "uint", v1, "uint", v2, "uint", v3)
}

glUniform1uiv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform2uiv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform3uiv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform4uiv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glTexParameterIiv(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glTexParameterIuiv(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glGetTexParameterIiv(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glGetTexParameterIuiv(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glClearBufferiv(buffer, drawbuffer, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buffer, "int", drawbuffer, "uint", value)
}

glClearBufferuiv(buffer, drawbuffer, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buffer, "int", drawbuffer, "uint", value)
}

glClearBufferfv(buffer, drawbuffer, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buffer, "int", drawbuffer, "uint", value)
}

glClearBufferfi(buffer, drawbuffer, depth, stencil)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buffer, "int", drawbuffer, "float", depth, "int", stencil)
}

glGetStringi(name, index)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", name, "uint", index, "uint")
}

glDrawArraysInstanced(mode, first, count, primcount)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "int", first, "int", count, "int", primcount)
}

glDrawElementsInstanced(mode, count, type, indices, primcount)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "int", count, "uint", type, "uint", indices, "int", primcount)
}

glTexBuffer(target, internalformat, buffer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", internalformat, "uint", buffer)
}

glPrimitiveRestartIndex(index)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index)
}

glGetInteger64i_v(target, index, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", data)
}

glGetBufferParameteri64v(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glFramebufferTexture(target, attachment, texture, level)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", attachment, "uint", texture, "int", level)
}

glVertexAttribDivisor(index, divisor)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", divisor)
}

glMinSampleShading(value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "float", value)
}

glBlendEquationi(buf, mode)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buf, "uint", mode)
}

glBlendEquationSeparatei(buf, modeRGB, modeAlpha)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buf, "uint", modeRGB, "uint", modeAlpha)
}

glBlendFunci(buf, src, dst)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buf, "uint", src, "uint", dst)
}

glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buf, "uint", srcRGB, "uint", dstRGB, "uint", srcAlpha, "uint", dstAlpha)
}

glIsRenderbuffer(renderbuffer)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", renderbuffer, "uchar")
}

glBindRenderbuffer(target, renderbuffer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", renderbuffer)
}

glDeleteRenderbuffers(n, renderbuffers)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", renderbuffers)
}

glGenRenderbuffers(n, renderbuffers)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", renderbuffers)
}

glRenderbufferStorage(target, internalformat, width, height)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", internalformat, "int", width, "int", height)
}

glGetRenderbufferParameteriv(target, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", pname, "uint", params)
}

glIsFramebuffer(framebuffer)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", framebuffer, "uchar")
}

glBindFramebuffer(target, framebuffer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", framebuffer)
}

glDeleteFramebuffers(n, framebuffers)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", framebuffers)
}

glGenFramebuffers(n, framebuffers)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", framebuffers)
}

glCheckFramebufferStatus(target)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint")
}

glFramebufferTexture1D(target, attachment, textarget, texture, level)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", attachment, "uint", textarget, "uint", texture, "int", level)
}

glFramebufferTexture2D(target, attachment, textarget, texture, level)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", attachment, "uint", textarget, "uint", texture, "int", level)
}

glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", attachment, "uint", textarget, "uint", texture, "int", level, "int", zoffset)
}

glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", attachment, "uint", renderbuffertarget, "uint", renderbuffer)
}

glGetFramebufferAttachmentParameteriv(target, attachment, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", attachment, "uint", pname, "uint", params)
}

glGenerateMipmap(target)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target)
}

glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", srcX0, "int", srcY0, "int", srcX1, "int", srcY1, "int", dstX0, "int", dstY0, "int", dstX1, "int", dstY1, "uint", mask, "uint", filter)
}

glRenderbufferStorageMultisample(target, samples, internalformat, width, height)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "int", samples, "uint", internalformat, "int", width, "int", height)
}

glFramebufferTextureLayer(target, attachment, texture, level, layer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", attachment, "uint", texture, "int", level, "int", layer)
}

glMapBufferRange(target, offset, length, access)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", offset, "uint", length, "uint", access, "uint")
}

glFlushMappedBufferRange(target, offset, length)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", offset, "uint", length)
}

glBindVertexArray(array)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", array)
}

glDeleteVertexArrays(n, arrays)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", arrays)
}

glGenVertexArrays(n, arrays)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", arrays)
}

glIsVertexArray(array)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", array, "uchar")
}

glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", uniformCount, "uint", uniformNames, "uint", uniformIndices)
}

glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", uniformCount, "uint", uniformIndices, "uint", pname, "uint", params)
}

glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", uniformIndex, "int", bufSize, "uint", length, "uint", uniformName)
}

glGetUniformBlockIndex(program, uniformBlockName)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", uniformBlockName, "uint")
}

glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", uniformBlockIndex, "uint", pname, "uint", params)
}

glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", uniformBlockIndex, "int", bufSize, "uint", length, "uint", uniformBlockName)
}

glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", uniformBlockIndex, "uint", uniformBlockBinding)
}

glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", readTarget, "uint", writeTarget, "uint", readOffset, "uint", writeOffset, "uint", size)
}

glDrawElementsBaseVertex(mode, count, type, indices, basevertex)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "int", count, "uint", type, "uint", indices, "int", basevertex)
}

glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "uint", start, "uint", end, "int", count, "uint", type, "uint", indices, "int", basevertex)
}

glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "int", count, "uint", type, "uint", indices, "int", primcount, "int", basevertex)
}

glMultiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "uint", count, "uint", type, "uint", indices, "int", primcount, "uint", basevertex)
}

glProvokingVertex(mode)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode)
}

glFenceSync(condition, flags)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", condition, "uint", flags, "uint")
}

glIsSync(sync)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sync, "uchar")
}

glDeleteSync(sync)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sync)
}

glClientWaitSync(sync, flags, timeout)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sync, "uint", flags, "uint64", timeout, "uint")
}

glWaitSync(sync, flags, timeout)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sync, "uint", flags, "uint64", timeout)
}

glGetInteger64v(pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pname, "uint", params)
}

glGetSynciv(sync, pname, bufSize, length, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sync, "uint", pname, "int", bufSize, "uint", length, "uint", values)
}

glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "int", samples, "int", internalformat, "int", width, "int", height, "uchar", fixedsamplelocations)
}

glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "int", samples, "int", internalformat, "int", width, "int", height, "int", depth, "uchar", fixedsamplelocations)
}

glGetMultisamplefv(pname, index, val)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pname, "uint", index, "uint", val)
}

glSampleMaski(index, mask)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", mask)
}

glBlendEquationiARB(buf, mode)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buf, "uint", mode)
}

glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buf, "uint", modeRGB, "uint", modeAlpha)
}

glBlendFunciARB(buf, src, dst)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buf, "uint", src, "uint", dst)
}

glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", buf, "uint", srcRGB, "uint", dstRGB, "uint", srcAlpha, "uint", dstAlpha)
}

glMinSampleShadingARB(value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "float", value)
}

glNamedStringARB(type, namelen, name, stringlen, string)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "int", namelen, "uint", name, "int", stringlen, "uint", string)
}

glDeleteNamedStringARB(namelen, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", namelen, "uint", name)
}

glCompileShaderIncludeARB(shader, count, path, length)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shader, "int", count, "uint", path, "uint", length)
}

glIsNamedStringARB(namelen, name)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", namelen, "uint", name, "uchar")
}

glGetNamedStringARB(namelen, name, bufSize, stringlen, string)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", namelen, "uint", name, "int", bufSize, "uint", stringlen, "uint", string)
}

glGetNamedStringivARB(namelen, name, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", namelen, "uint", name, "uint", pname, "uint", params)
}

glBindFragDataLocationIndexed(program, colorNumber, index, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", colorNumber, "uint", index, "uint", name)
}

glGetFragDataIndex(program, name)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", name, "int")
}

glGenSamplers(count, samplers)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", count, "uint", samplers)
}

glDeleteSamplers(count, samplers)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", count, "uint", samplers)
}

glIsSampler(sampler)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uchar")
}

glBindSampler(unit, sampler)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", unit, "uint", sampler)
}

glSamplerParameteri(sampler, pname, param)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "int", param)
}

glSamplerParameteriv(sampler, pname, param)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "uint", param)
}

glSamplerParameterf(sampler, pname, param)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "float", param)
}

glSamplerParameterfv(sampler, pname, param)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "uint", param)
}

glSamplerParameterIiv(sampler, pname, param)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "uint", param)
}

glSamplerParameterIuiv(sampler, pname, param)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "uint", param)
}

glGetSamplerParameteriv(sampler, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "uint", params)
}

glGetSamplerParameterIiv(sampler, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "uint", params)
}

glGetSamplerParameterfv(sampler, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "uint", params)
}

glGetSamplerParameterIuiv(sampler, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", sampler, "uint", pname, "uint", params)
}

glQueryCounter(id, target)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", id, "uint", target)
}

glGetQueryObjecti64v(id, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", id, "uint", pname, "uint", params)
}

glGetQueryObjectui64v(id, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", id, "uint", pname, "uint", params)
}

glVertexP2ui(type, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", value)
}

glVertexP2uiv(type, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", value)
}

glVertexP3ui(type, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", value)
}

glVertexP3uiv(type, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", value)
}

glVertexP4ui(type, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", value)
}

glVertexP4uiv(type, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", value)
}

glTexCoordP1ui(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glTexCoordP1uiv(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glTexCoordP2ui(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glTexCoordP2uiv(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glTexCoordP3ui(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glTexCoordP3uiv(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glTexCoordP4ui(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glTexCoordP4uiv(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glMultiTexCoordP1ui(texture, type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", texture, "uint", type, "uint", coords)
}

glMultiTexCoordP1uiv(texture, type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", texture, "uint", type, "uint", coords)
}

glMultiTexCoordP2ui(texture, type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", texture, "uint", type, "uint", coords)
}

glMultiTexCoordP2uiv(texture, type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", texture, "uint", type, "uint", coords)
}

glMultiTexCoordP3ui(texture, type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", texture, "uint", type, "uint", coords)
}

glMultiTexCoordP3uiv(texture, type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", texture, "uint", type, "uint", coords)
}

glMultiTexCoordP4ui(texture, type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", texture, "uint", type, "uint", coords)
}

glMultiTexCoordP4uiv(texture, type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", texture, "uint", type, "uint", coords)
}

glNormalP3ui(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glNormalP3uiv(type, coords)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", coords)
}

glColorP3ui(type, color)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", color)
}

glColorP3uiv(type, color)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", color)
}

glColorP4ui(type, color)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", color)
}

glColorP4uiv(type, color)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", color)
}

glSecondaryColorP3ui(type, color)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", color)
}

glSecondaryColorP3uiv(type, color)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "uint", color)
}

glVertexAttribP1ui(index, type, normalized, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", type, "uchar", normalized, "uint", value)
}

glVertexAttribP1uiv(index, type, normalized, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", type, "uchar", normalized, "uint", value)
}

glVertexAttribP2ui(index, type, normalized, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", type, "uchar", normalized, "uint", value)
}

glVertexAttribP2uiv(index, type, normalized, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", type, "uchar", normalized, "uint", value)
}

glVertexAttribP3ui(index, type, normalized, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", type, "uchar", normalized, "uint", value)
}

glVertexAttribP3uiv(index, type, normalized, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", type, "uchar", normalized, "uint", value)
}

glVertexAttribP4ui(index, type, normalized, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", type, "uchar", normalized, "uint", value)
}

glVertexAttribP4uiv(index, type, normalized, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", type, "uchar", normalized, "uint", value)
}

glDrawArraysIndirect(mode, indirect)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "uint", indirect)
}

glDrawElementsIndirect(mode, type, indirect)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "uint", type, "uint", indirect)
}

glUniform1d(location, x)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "double", x)
}

glUniform2d(location, x, y)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "double", x, "double", y)
}

glUniform3d(location, x, y, z)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "double", x, "double", y, "double", z)
}

glUniform4d(location, x, y, z, w)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "double", x, "double", y, "double", z, "double", w)
}

glUniform1dv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform2dv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform3dv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniform4dv(location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uint", value)
}

glUniformMatrix2dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix3dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix4dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix2x3dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix2x4dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix3x2dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix3x4dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix4x2dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glUniformMatrix4x3dv(location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", location, "int", count, "uchar", transpose, "uint", value)
}

glGetUniformdv(program, location, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "uint", params)
}

glGetSubroutineUniformLocation(program, shadertype, name)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", shadertype, "uint", name, "int")
}

glGetSubroutineIndex(program, shadertype, name)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", shadertype, "uint", name, "uint")
}

glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", shadertype, "uint", index, "uint", pname, "uint", values)
}

glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", shadertype, "uint", index, "int", bufsize, "uint", length, "uint", name)
}

glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", shadertype, "uint", index, "int", bufsize, "uint", length, "uint", name)
}

glUniformSubroutinesuiv(shadertype, count, indices)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shadertype, "int", count, "uint", indices)
}

glGetUniformSubroutineuiv(shadertype, location, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shadertype, "int", location, "uint", params)
}

glGetProgramStageiv(program, shadertype, pname, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", shadertype, "uint", pname, "uint", values)
}

glPatchParameteri(pname, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pname, "int", value)
}

glPatchParameterfv(pname, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pname, "uint", values)
}

glBindTransformFeedback(target, id)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", id)
}

glDeleteTransformFeedbacks(n, ids)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", ids)
}

glGenTransformFeedbacks(n, ids)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", ids)
}

glIsTransformFeedback(id)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", id, "uchar")
}

glPauseTransformFeedback()
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))))
}

glResumeTransformFeedback()
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))))
}

glDrawTransformFeedback(mode, id)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "uint", id)
}

glDrawTransformFeedbackStream(mode, id, stream)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", mode, "uint", id, "uint", stream)
}

glBeginQueryIndexed(target, index, id)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", id)
}

glEndQueryIndexed(target, index)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index)
}

glGetQueryIndexediv(target, index, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", pname, "uint", params)
}

glReleaseShaderCompiler()
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))))
}

glShaderBinary(count, shaders, binaryformat, binary, length)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", count, "uint", shaders, "uint", binaryformat, "uint", binary, "int", length)
}

glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", shadertype, "uint", precisiontype, "uint", range, "uint", precision)
}

glDepthRangef(n, f)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "float", n, "float", f)
}

glClearDepthf(d)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "float", d)
}

glGetProgramBinary(program, bufSize, length, binaryFormat, binary)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", bufSize, "uint", length, "uint", binaryFormat, "uint", binary)
}

glProgramBinary(program, binaryFormat, binary, length)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", binaryFormat, "uint", binary, "int", length)
}

glProgramParameteri(program, pname, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "uint", pname, "int", value)
}

glUseProgramStages(pipeline, stages, program)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pipeline, "uint", stages, "uint", program)
}

glActiveShaderProgram(pipeline, program)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pipeline, "uint", program)
}

glCreateShaderProgramv(type, count, strings)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", type, "int", count, "uint", strings, "uint")
}

glBindProgramPipeline(pipeline)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pipeline)
}

glDeleteProgramPipelines(n, pipelines)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", pipelines)
}

glGenProgramPipelines(n, pipelines)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", n, "uint", pipelines)
}

glIsProgramPipeline(pipeline)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pipeline, "uchar")
}

glGetProgramPipelineiv(pipeline, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pipeline, "uint", pname, "uint", params)
}

glProgramUniform1i(program, location, v0)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", v0)
}

glProgramUniform1iv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform1f(program, location, v0)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "float", v0)
}

glProgramUniform1fv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform1d(program, location, v0)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "double", v0)
}

glProgramUniform1dv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform1ui(program, location, v0)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "uint", v0)
}

glProgramUniform1uiv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform2i(program, location, v0, v1)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", v0, "int", v1)
}

glProgramUniform2iv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform2f(program, location, v0, v1)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "float", v0, "float", v1)
}

glProgramUniform2fv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform2d(program, location, v0, v1)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "double", v0, "double", v1)
}

glProgramUniform2dv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform2ui(program, location, v0, v1)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "uint", v0, "uint", v1)
}

glProgramUniform2uiv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform3i(program, location, v0, v1, v2)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", v0, "int", v1, "int", v2)
}

glProgramUniform3iv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform3f(program, location, v0, v1, v2)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "float", v0, "float", v1, "float", v2)
}

glProgramUniform3fv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform3d(program, location, v0, v1, v2)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "double", v0, "double", v1, "double", v2)
}

glProgramUniform3dv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform3ui(program, location, v0, v1, v2)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "uint", v0, "uint", v1, "uint", v2)
}

glProgramUniform3uiv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform4i(program, location, v0, v1, v2, v3)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", v0, "int", v1, "int", v2, "int", v3)
}

glProgramUniform4iv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform4f(program, location, v0, v1, v2, v3)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "float", v0, "float", v1, "float", v2, "float", v3)
}

glProgramUniform4fv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform4d(program, location, v0, v1, v2, v3)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "double", v0, "double", v1, "double", v2, "double", v3)
}

glProgramUniform4dv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniform4ui(program, location, v0, v1, v2, v3)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "uint", v0, "uint", v1, "uint", v2, "uint", v3)
}

glProgramUniform4uiv(program, location, count, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uint", value)
}

glProgramUniformMatrix2fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix3fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix4fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix2dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix3dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix4dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix2x3fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix3x2fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix2x4fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix4x2fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix3x4fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix4x3fv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix2x3dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix3x2dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix2x4dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix4x2dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix3x4dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glProgramUniformMatrix4x3dv(program, location, count, transpose, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", count, "uchar", transpose, "uint", value)
}

glValidateProgramPipeline(pipeline)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pipeline)
}

glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", pipeline, "int", bufSize, "uint", length, "uint", infoLog)
}

glVertexAttribL1d(index, x)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", x)
}

glVertexAttribL2d(index, x, y)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", x, "double", y)
}

glVertexAttribL3d(index, x, y, z)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", x, "double", y, "double", z)
}

glVertexAttribL4d(index, x, y, z, w)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", x, "double", y, "double", z, "double", w)
}

glVertexAttribL1dv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribL2dv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribL3dv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribL4dv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glVertexAttribLPointer(index, size, type, stride, pointer)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "int", size, "uint", type, "int", stride, "uint", pointer)
}

glGetVertexAttribLdv(index, pname, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", pname, "uint", params)
}

glViewportArrayv(first, count, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", first, "int", count, "uint", v)
}

glViewportIndexedf(index, x, y, w, h)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "float", x, "float", y, "float", w, "float", h)
}

glViewportIndexedfv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glScissorArrayv(first, count, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", first, "int", count, "uint", v)
}

glScissorIndexed(index, left, bottom, width, height)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "int", left, "int", bottom, "int", width, "int", height)
}

glScissorIndexedv(index, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "uint", v)
}

glDepthRangeArrayv(first, count, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", first, "int", count, "uint", v)
}

glDepthRangeIndexed(index, n, f)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", index, "double", n, "double", f)
}

glGetFloati_v(target, index, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", data)
}

glGetDoublei_v(target, index, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", index, "uint", data)
}

glCreateSyncFromCLeventARB(context, event, flags)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", context, "uint", event, "uint", flags, "uint")
}

glDebugMessageControlARB(source, type, severity, count, ids, enabled)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", source, "uint", type, "uint", severity, "int", count, "uint", ids, "uchar", enabled)
}

glDebugMessageInsertARB(source, type, id, severity, length, buf)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", source, "uint", type, "uint", id, "uint", severity, "int", length, "uint", buf)
}

glDebugMessageCallbackARB(callback, userParam)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", callback, "uint", userParam)
}

glGetDebugMessageLogARB(count, bufsize, sources, types, ids, severities, lengths, messageLog)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", count, "int", bufsize, "uint", sources, "uint", types, "uint", ids, "uint", severities, "uint", lengths, "uint", messageLog, "uint")
}

glGetGraphicsResetStatusARB()
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint")
}

glGetnMapdvARB(target, query, bufSize, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", query, "int", bufSize, "uint", v)
}

glGetnMapfvARB(target, query, bufSize, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", query, "int", bufSize, "uint", v)
}

glGetnMapivARB(target, query, bufSize, v)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", query, "int", bufSize, "uint", v)
}

glGetnPixelMapfvARB(map, bufSize, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", map, "int", bufSize, "uint", values)
}

glGetnPixelMapuivARB(map, bufSize, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", map, "int", bufSize, "uint", values)
}

glGetnPixelMapusvARB(map, bufSize, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", map, "int", bufSize, "uint", values)
}

glGetnPolygonStippleARB(bufSize, pattern)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", bufSize, "uint", pattern)
}

glGetnColorTableARB(target, format, type, bufSize, table)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", format, "uint", type, "int", bufSize, "uint", table)
}

glGetnConvolutionFilterARB(target, format, type, bufSize, image)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", format, "uint", type, "int", bufSize, "uint", image)
}

glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uint", format, "uint", type, "int", rowBufSize, "uint", row, "int", columnBufSize, "uint", column, "uint", span)
}

glGetnHistogramARB(target, reset, format, type, bufSize, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uchar", reset, "uint", format, "uint", type, "int", bufSize, "uint", values)
}

glGetnMinmaxARB(target, reset, format, type, bufSize, values)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "uchar", reset, "uint", format, "uint", type, "int", bufSize, "uint", values)
}

glGetnTexImageARB(target, level, format, type, bufSize, img)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "int", level, "uint", format, "uint", type, "int", bufSize, "uint", img)
}

glReadnPixelsARB(x, y, width, height, format, type, bufSize, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "int", x, "int", y, "int", width, "int", height, "uint", format, "uint", type, "int", bufSize, "uint", data)
}

glGetnCompressedTexImageARB(target, lod, bufSize, img)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", target, "int", lod, "int", bufSize, "uint", img)
}

glGetnUniformfvARB(program, location, bufSize, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", bufSize, "uint", params)
}

glGetnUniformivARB(program, location, bufSize, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", bufSize, "uint", params)
}

glGetnUniformuivARB(program, location, bufSize, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", bufSize, "uint", params)
}

glGetnUniformdvARB(program, location, bufSize, params)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", program, "int", location, "int", bufSize, "uint", params)
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;; GLU ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OpenGL GLU Constant Definitions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GLU_FALSE := 0
GLU_TRUE := 1

GLU_VERSION_1_1 := 1
GLU_VERSION_1_2 := 1

GLU_VERSION := 100800
GLU_EXTENSIONS := 100801

GLU_INVALID_ENUM := 100900
GLU_INVALID_VALUE := 100901
GLU_OUT_OF_MEMORY := 100902
GLU_INVALID_OPERATION := 100904

GLU_OUTLINE_POLYGON := 100240
GLU_OUTLINE_PATCH := 100241

GLU_NURBS_ERROR1 := 100251
GLU_NURBS_ERROR2 := 100252
GLU_NURBS_ERROR3 := 100253
GLU_NURBS_ERROR4 := 100254
GLU_NURBS_ERROR5 := 100255
GLU_NURBS_ERROR6 := 100256
GLU_NURBS_ERROR7 := 100257
GLU_NURBS_ERROR8 := 100258
GLU_NURBS_ERROR9 := 100259
GLU_NURBS_ERROR10 := 100260
GLU_NURBS_ERROR11 := 100261
GLU_NURBS_ERROR12 := 100262
GLU_NURBS_ERROR13 := 100263
GLU_NURBS_ERROR14 := 100264
GLU_NURBS_ERROR15 := 100265
GLU_NURBS_ERROR16 := 100266
GLU_NURBS_ERROR17 := 100267
GLU_NURBS_ERROR18 := 100268
GLU_NURBS_ERROR19 := 100269
GLU_NURBS_ERROR20 := 100270
GLU_NURBS_ERROR21 := 100271
GLU_NURBS_ERROR22 := 100272
GLU_NURBS_ERROR23 := 100273
GLU_NURBS_ERROR24 := 100274
GLU_NURBS_ERROR25 := 100275
GLU_NURBS_ERROR26 := 100276
GLU_NURBS_ERROR27 := 100277
GLU_NURBS_ERROR28 := 100278
GLU_NURBS_ERROR29 := 100279
GLU_NURBS_ERROR30 := 100280
GLU_NURBS_ERROR31 := 100281
GLU_NURBS_ERROR32 := 100282
GLU_NURBS_ERROR33 := 100283
GLU_NURBS_ERROR34 := 100284
GLU_NURBS_ERROR35 := 100285
GLU_NURBS_ERROR36 := 100286
GLU_NURBS_ERROR37 := 100287

GLU_AUTO_LOAD_MATRIX := 100200
GLU_CULLING := 100201
GLU_SAMPLING_TOLERANCE := 100203
GLU_DISPLAY_MODE := 100204
GLU_PARAMETRIC_TOLERANCE := 100202
GLU_SAMPLING_METHOD := 100205
GLU_U_STEP := 100206
GLU_V_STEP := 100207

GLU_PATH_LENGTH := 100215
GLU_PARAMETRIC_ERROR := 100216
GLU_DOMAIN_DISTANCE := 100217

GLU_MAP1_TRIM_2 := 100210
GLU_MAP1_TRIM_3 := 100211

GLU_POINT := 100010
GLU_LINE := 100011
GLU_FILL := 100012
GLU_SILHOUETTE := 100013

GLU_ERROR := 100103

GLU_SMOOTH := 100000
GLU_FLAT := 100001
GLU_NONE := 100002

GLU_OUTSIDE := 100020
GLU_INSIDE := 100021

GLU_TESS_BEGIN := 100100
GLU_BEGIN := 100100
GLU_TESS_VERTEX := 100101
GLU_VERTEX := 100101
GLU_TESS_END := 100102
GLU_END := 100102
GLU_TESS_ERROR := 100103
GLU_TESS_EDGE_FLAG := 100104
GLU_EDGE_FLAG := 100104
GLU_TESS_COMBINE := 100105
GLU_TESS_BEGIN_DATA := 100106
GLU_TESS_VERTEX_DATA := 100107
GLU_TESS_END_DATA := 100108
GLU_TESS_ERROR_DATA := 100109
GLU_TESS_EDGE_FLAG_DATA := 100110
GLU_TESS_COMBINE_DATA := 100111

GLU_CW := 100120
GLU_CCW := 100121
GLU_INTERIOR := 100122
GLU_EXTERIOR := 100123
GLU_UNKNOWN := 100124

GLU_TESS_WINDING_RULE := 100140
GLU_TESS_BOUNDARY_ONLY := 100141
GLU_TESS_TOLERANCE := 100142

GLU_TESS_ERROR1 := 100151
GLU_TESS_ERROR2 := 100152
GLU_TESS_ERROR3 := 100153
GLU_TESS_ERROR4 := 100154
GLU_TESS_ERROR5 := 100155
GLU_TESS_ERROR6 := 100156
GLU_TESS_ERROR7 := 100157
GLU_TESS_ERROR8 := 100158
GLU_TESS_MISSING_BEGIN_POLYGON := 100151
GLU_TESS_MISSING_BEGIN_CONTOUR := 100152
GLU_TESS_MISSING_END_POLYGON := 100153
GLU_TESS_MISSING_END_CONTOUR := 100154
GLU_TESS_COORD_TOO_LARGE := 100155
GLU_TESS_NEED_COMBINE_CALLBACK := 100156

GLU_TESS_WINDING_ODD := 100130
GLU_TESS_WINDING_NONZERO := 100131
GLU_TESS_WINDING_POSITIVE := 100132
GLU_TESS_WINDING_NEGATIVE := 100133
GLU_TESS_WINDING_ABS_GEQ_TWO := 100134

GLU_INCOMPATIBLE_GL_VERSION := 100903

GLU_TESS_MAX_COORD := 1.0e150


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OpenGL GLU Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

gluBeginCurve(nurb)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb)
}

gluBeginPolygon(tess)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess)
}

gluBeginSurface(nurb)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb)
}

gluBeginTrim(nurb)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb)
}

gluBuild1DMipmaps(target, internalFormat, width, format, type, data)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", target, "int", internalFormat, "int", width, "uint", format, "uint", type, "uint", data, "int")
}

gluBuild2DMipmaps(target, internalFormat, width, height, format, type, data)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", target, "int", internalFormat, "int", width, "int", height, "uint", format, "uint", type, "uint", data, "int")
}

gluCylinder(quad, base, top, height, slices, stacks)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "double", base, "double", top, "double", height, "int", slices, "int", stacks)
}

gluDeleteNurbsRenderer(nurb)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb)
}

gluDeleteQuadric(quad)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad)
}

gluDeleteTess(tess)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess)
}

gluDisk(quad, inner, outer, slices, loops)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "double", inner, "double", outer, "int", slices, "int", loops)
}

gluEndCurve(nurb)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb)
}

gluEndPolygon(tess)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess)
}

gluEndSurface(nurb)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb)
}

gluEndTrim(nurb)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb)
}

gluErrorString(error)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", error, "uint")
}

gluErrorUnicodeStringEXT(error)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", error, "uint")
}

gluGetNurbsProperty(nurb, property, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb, "uint", property, "uint", data)
}

gluGetString(name)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", name, "uint")
}

gluGetTessProperty(tess, which, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess, "uint", which, "uint", data)
}

gluLoadSamplingMatrices(nurb, model, perspective, view)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb, "uint", model, "uint", perspective, "uint", view)
}

gluLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "double", eyeX, "double", eyeY, "double", eyeZ, "double", centerX, "double", centerY, "double", centerZ, "double", upX, "double", upY, "double", upZ)
}

gluNewNurbsRenderer()
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint")
}

gluNewQuadric()
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint")
}

gluNewTess()
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint")
}

gluNextContour(tess, type)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess, "uint", type)
}

gluNurbsCallback(nurb, which, CallBackFunc)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb, "uint", which, "uint", CallBackFunc)
}

gluNurbsCurve(nurb, knotCount, knots, stride, control, order, type)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb, "int", knotCount, "uint", knots, "int", stride, "uint", control, "int", order, "uint", type)
}

gluNurbsProperty(nurb, property, value)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb, "uint", property, "float", value)
}

gluNurbsSurface(nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb, "int", sKnotCount, "uint", sKnots, "int", tKnotCount, "uint", tKnots, "int", sStride, "int", tStride, "uint", control, "int", sOrder, "int", tOrder, "uint", type)
}

gluOrtho2D(left, right, bottom, top)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "double", left, "double", right, "double", bottom, "double", top)
}

gluPartialDisk(quad, inner, outer, slices, loops, start, sweep)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "double", inner, "double", outer, "int", slices, "int", loops, "double", start, "double", sweep)
}

gluPerspective(fovy, aspect, zNear, zFar)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "double", fovy, "double", aspect, "double", zNear, "double", zFar)
}

gluPickMatrix(x, y, delX, delY, viewport)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "double", x, "double", y, "double", delX, "double", delY, "uint", viewport)
}

gluProject(objX, objY, objZ, model, proj, view, winX, winY, winZ)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "double", objX, "double", objY, "double", objZ, "uint", model, "uint", proj, "uint", view, "uint", winX, "uint", winY, "uint", winZ, "int")
}

gluPwlCurve(nurb, count, data, stride, type)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", nurb, "int", count, "uint", data, "int", stride, "uint", type)
}

gluQuadricCallback(quad, which, CallBackFunc)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "uint", which, "uint", CallBackFunc)
}

gluQuadricDrawStyle(quad, draw)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "uint", draw)
}

gluQuadricNormals(quad, normal)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "uint", normal)
}

gluQuadricOrientation(quad, orientation)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "uint", orientation)
}

gluQuadricTexture(quad, texture)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "uchar", texture)
}

gluScaleImage(format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", format, "int", wIn, "int", hIn, "uint", typeIn, "uint", dataIn, "int", wOut, "int", hOut, "uint", typeOut, "uint", dataOut, "int")
}

gluSphere(quad, radius, slices, stacks)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", quad, "double", radius, "int", slices, "int", stacks)
}

gluTessBeginContour(tess)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess)
}

gluTessBeginPolygon(tess, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess, "uint", data)
}

gluTessCallback(tess, which, CallBackFunc)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess, "uint", which, "uint", CallBackFunc)
}

gluTessEndContour(tess)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess)
}

gluTessEndPolygon(tess)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess)
}

gluTessNormal(tess, valueX, valueY, valueZ)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess, "double", valueX, "double", valueY, "double", valueZ)
}

gluTessProperty(tess, which, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess, "uint", which, "double", data)
}

gluTessVertex(tess, location, data)
{
  static proc
  DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "uint", tess, "uint", location, "uint", data)
}

gluUnProject(winX, winY, winZ, model, proj, view, objX, objY, objZ)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "double", winX, "double", winY, "double", winZ, "uint", model, "uint", proj, "uint", view, "uint", objX, "uint", objY, "uint", objZ, "int")
}

gluUnProject4(winX, winY, winZ, clipW, model, proj, view, nearVal, farVal, objX, objY, objZ, objW)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "glu"))), "double", winX, "double", winY, "double", winZ, "double", clipW, "uint", model, "uint", proj, "uint", view, "double", nearVal, "double", farVal, "uint", objX, "uint", objY, "uint", objZ, "uint", objW, "int")
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OpenGL GLU ANSI/UNICODE Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

gluErrorStringWIN(error)
{
  if (A_IsUnicode)
    return gluErrorUnicodeStringEXT(error)
  return gluErrorString(error)
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;; WGL ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Windows GL Constant Definitions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LPD_DOUBLEBUFFER := 1
LPD_STEREO := 2
LPD_SUPPORT_GDI := 16
LPD_SUPPORT_OPENGL := 32
LPD_SHARE_DEPTH := 64
LPD_SHARE_STENCIL := 128
LPD_SHARE_ACCUM := 256
LPD_SWAP_EXCHANGE := 512
LPD_SWAP_COPY := 1024
LPD_TRANSPARENT := 4096
LPD_TYPE_RGBA := 0
LPD_TYPE_COLORINDEX := 1
PFD_TYPE_RGBA := 0
PFD_TYPE_COLORINDEX := 1
PFD_MAIN_PLANE := 0
PFD_OVERLAY_PLANE := 1
PFD_UNDERLAY_PLANE := (-1)
PFD_DOUBLEBUFFER := 1
PFD_STEREO := 2
PFD_DRAW_TO_WINDOW := 4
PFD_DRAW_TO_BITMAP := 8
PFD_SUPPORT_GDI := 16
PFD_SUPPORT_OPENGL := 32
PFD_GENERIC_FORMAT := 64
PFD_NEED_PALETTE := 128
PFD_NEED_SYSTEM_PALETTE := 0x00000100
PFD_SWAP_EXCHANGE := 0x00000200
PFD_SWAP_COPY := 0x00000400
PFD_SWAP_LAYER_BUFFERS := 0x00000800
PFD_GENERIC_ACCELERATED := 0x00001000
PFD_DEPTH_DONTCARE := 0x20000000
PFD_DOUBLEBUFFER_DONTCARE := 0x40000000
PFD_STEREO_DONTCARE := 0x80000000
WGL_SWAP_MAIN_PLANE := 1
WGL_SWAP_OVERLAY1 := 2
WGL_SWAP_OVERLAY2 := 4
WGL_SWAP_OVERLAY3 := 8
WGL_SWAP_OVERLAY4 := 16
WGL_SWAP_OVERLAY5 := 32
WGL_SWAP_OVERLAY6 := 64
WGL_SWAP_OVERLAY7 := 128
WGL_SWAP_OVERLAY8 := 256
WGL_SWAP_OVERLAY9 := 512
WGL_SWAP_OVERLAY10 := 1024
WGL_SWAP_OVERLAY11 := 2048
WGL_SWAP_OVERLAY12 := 4096
WGL_SWAP_OVERLAY13 := 8192
WGL_SWAP_OVERLAY14 := 16384
WGL_SWAP_OVERLAY15 := 32768
WGL_SWAP_UNDERLAY1 := 65536
WGL_SWAP_UNDERLAY2 := 0x20000
WGL_SWAP_UNDERLAY3 := 0x40000
WGL_SWAP_UNDERLAY4 := 0x80000
WGL_SWAP_UNDERLAY5 := 0x100000
WGL_SWAP_UNDERLAY6 := 0x200000
WGL_SWAP_UNDERLAY7 := 0x400000
WGL_SWAP_UNDERLAY8 := 0x800000
WGL_SWAP_UNDERLAY9 := 0x1000000
WGL_SWAP_UNDERLAY10 := 0x2000000
WGL_SWAP_UNDERLAY11 := 0x4000000
WGL_SWAP_UNDERLAY12 := 0x8000000
WGL_SWAP_UNDERLAY13 := 0x10000000
WGL_SWAP_UNDERLAY14 := 0x20000000
WGL_SWAP_UNDERLAY15 := 0x40000000
WGL_FONT_LINES := 0
WGL_FONT_POLYGONS := 1


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OpenGL GDI Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

ChoosePixelFormat(hdc, ppfd)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "gdi"))), "uint", hdc, "uint", ppfd, "int")
}

DescribePixelFormat(hdc, iPixelFormat, nBytes, ppfd)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "gdi"))), "uint", hdc, "int", iPixelFormat, "uint", nBytes, "uint", ppfd, "int")
}

GetEnhMetaFilePixelFormat(hemf, cbBuffer, ppd)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "gdi"))), "uint", hemf, "uint", cbBuffer, "uint", ppd, "uint")
}

GetPixelFormat(hdc)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "gdi"))), "uint", hdc, "int")
}

SetPixelFormat(hdc, iPixelFormat, ppfd)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "gdi"))), "uint", hdc, "int", iPixelFormat, "uint", ppfd, "uint")
}

SwapBuffers(hdc)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc, "gdi"))), "uint", hdc, "uint")
}


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OpenGL WGL Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

wglCreateContext(hdc)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "uint")
}

wglCreateLayerContext(hdc, iLayerPlane)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "int", iLayerPlane, "uint")
}

wglCopyContext(hglrcSrc, hglrcDst, mask)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hglrcSrc, "uint", hglrcDst, "uint", mask, "uint")
}

wglDeleteContext(hglrc)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hglrc, "uint")
}

wglDescripeLayerPlane(hdc, iPixelFormat, iLayerPlane, nBytes, plpd)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "int", iPixelFormat, "int", iLayerPlane, "uint", nBytes, "uint", plpd, "uint")
}

wglGetCurrentContext()
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint")
}

wglGetCurrentDC()
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint")
}

wglGetLayerPaletteEntries(hdc, iLayerPlane, iStart, cEntries, pcr)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "int", iLayerPlane, "int", iStart, "int", cEntries, "uint", pcr, "int")
}

wglGetOpenGLProcAddress(lpszProc)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", lpszProc, "uint")
}

wglMakeCurrent(hdc, hglrc)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "uint", hglrc, "uint")
}

wglRealizeLayerPalette(hdc, iLayerPlane, bRealize)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "int", iLayerPlane, "uint", bRealize, "uint")
}

wglSetLayerPaletteEntries(hdc, iLayerPlane, iStart, cEntries, pcr)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "int", iLayerPlane, "int", iStart, "int", cEntries, "uint", pcr, "int")
}

wglShareLists(hglrc1, hglrc2)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hglrc1, "uint", hglrc2, "uint")
}

wglSwapLayerBuffers(hdc, fuPlanes)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "uint", fuPlanes, "uint")
}

wglUseFontBitmapsA(hdc, first, count, listBase)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "uint", first, "uint", count, "uint", listBase, "uint")
}

wglUseFontBitmapsW(hdc, first, count, listBase)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "uint", first, "uint", count, "uint", listBase, "uint")
}

wglUseFontOutlinesA(hdc, first, count, listBase, deviation, extrusion, format, lpgmf)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "uint", first, "uint", count, "uint", listBase, "float", deviation, "float", extrusion, "int", format, "uint", lpgmf, "uint")
}

wglUseFontOutlinesW(hdc, first, count, listBase, deviation, extrusion, format, lpgmf)
{
  static proc
  return DllCall(((proc) ? proc : (proc := GetOpenGLProcAddress(A_ThisFunc))), "uint", hdc, "uint", first, "uint", count, "uint", listBase, "float", deviation, "float", extrusion, "int", format, "uint", lpgmf, "uint")
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OpenGL WGL ANSI/UNICODE Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

wglUseFontBitmaps(hdc, first, count, listBase)
{
  if (A_IsUnicode)
    return wglUseFontBitmapsW(hdc, first, count, listBase)
  return wglUseFontBitmapsA(hdc, first, count, listBase)
}

wglUseFontOutlines(hdc, first, count, listBase, deviation, extrusion, format, lpgmf)
{
  if (A_IsUnicode)
    return wglUseFontOutlinesW(hdc, first, count, listBase, deviation, extrusion, format, lpgmf)
  return wglUseFontOutlinesA(hdc, first, count, listBase, deviation, extrusion, format, lpgmf)
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;; AHK WRAPPER ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GL_WRAPPER_VERSION := 2.0

if (GL_USE64BIT)
{
  hOpenGL := DllCall("LoadLibrary", "str", "opengl64", "uint")
  hGLU := DllCall("LoadLibrary", "str", "glu64", "uint")
  if (!hGLU)
    hGLU := DllCall("LoadLibrary", "str", "glu32", "uint")
  hGDI := DllCall("LoadLibrary", "str", "gdi64", "uint")
  if ((!hOpenGL) || (!hGLU) || (!hGDI))
  {
    FreeOpenGLLibs()
    GL_USE64BIT := 0
    GL_USE64BIT_FAIL := 1
  }
}
if (!GL_USE64BIT)
{
  hOpenGL := DllCall("LoadLibrary", "str", "opengl32", "uint")
  hGLU := DllCall("LoadLibrary", "str", "glu32", "uint")
  hGDI := DllCall("LoadLibrary", "str", "gdi32", "uint")
  if ((!hOpenGL) || (!hGLU) || (!hGDI)) ;This should not realy happen!
  {
    MsgBox, 16, Error, Unable to load the required Librarys!`nThe programm will now exit!
    FreeOpenGLLibs()
    bit := (GL_USE64BIT_FAIL) ? 64 : 32
    FileAppend, Crash: %A_Now% (UTC: %A_NowUTC%)`nReason: Unable to load the required Librarys!`nWrapper: %GL_WRAPPER_VERSION%`nBit: %bit%`nOpenGL: %hOpenGL%`nGLU: %hGLU%`nGDI: %hGDI%`n`n, %A_ScriptDir%\crash_report.txt
       ExitApp
  }
}
hOpenGL := hGLU := hGDI := ""

GetOpenGLProcAddress(FuncName, Lib="")
{
  global GL_USE64BIT
  if (GL_USE64BIT)
  {
    if (Lib="glu")
    {
      Proc := DllCall("GetProcAddress", "uint", DllCall("GetModuleHandle", "str", "glu64", "uint"), "str", FuncName, "uint")
      if (!Proc)
        Proc := DllCall("GetProcAddress", "uint", DllCall("GetModuleHandle", "str", "glu32", "uint"), "str", FuncName, "uint")
    }
    else if (Lib="gdi")
      Proc := DllCall("GetProcAddress", "uint", DllCall("GetModuleHandle", "str", "gdi64", "uint"), "str", FuncName, "uint")
    else
      Proc := DllCall("GetProcAddress", "uint", DllCall("GetModuleHandle", "str", "opengl64", "uint"), "str", FuncName, "uint")
  }
  else
  {
    if (Lib="glu")
      Proc := DllCall("GetProcAddress", "uint", DllCall("GetModuleHandle", "str", "glu32", "uint"), "str", FuncName, "uint")
    else if (Lib="gdi")
      Proc := DllCall("GetProcAddress", "uint", DllCall("GetModuleHandle", "str", "gdi32", "uint"), "str", FuncName, "uint")
    else
      Proc := DllCall("GetProcAddress", "uint", DllCall("GetModuleHandle", "str", "opengl32", "uint"), "str", FuncName, "uint")
  }
  if (!Proc)
  {
    MsgBox, 16, Error, Unable to load "%FuncName%"!`nThe programm will now exit!
    FreeOpenGLLibs()
    bit := (GL_USE64BIT) ? 64 : 32
    FileAppend, Crash: %A_Now% (UTC: %A_NowUTC%)`nReason: Unable to load "%FuncName%"!Wrapper: %GL_WRAPPER_VERSION%`nBit: %bit%`n`nProc: %Proc%`n`n, %A_ScriptDir%\crash_report.txt
    ExitApp
  }  
  return Proc
}

FreeOpenGLLibs()
{
  DllCall("FreeLibrary", "uint", DllCall("GetModuleHandle", "str", "opengl32"))
  DllCall("FreeLibrary", "uint", DllCall("GetModuleHandle", "str", "glu32"))
  DllCall("FreeLibrary", "uint", DllCall("GetModuleHandle", "str", "opengl64"))
  DllCall("FreeLibrary", "uint", DllCall("GetModuleHandle", "str", "glu64"))
  DllCall("FreeLibrary", "uint", DllCall("GetModuleHandle", "str", "gdi64"))
  return 1
}

FreeOpenGLLib()
{
  return FreeOpenGLLibs()
}